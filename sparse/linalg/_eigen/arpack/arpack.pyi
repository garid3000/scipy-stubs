"""
This type stub file was generated by pyright.
"""

from typing import Final
from scipy._typing import Untyped
from scipy.sparse.linalg._interface import LinearOperator

__all__ = ["ArpackError", "ArpackNoConvergence", "eigs", "eigsh"]
DNAUPD_ERRORS: Final[dict[int, str]]
SNAUPD_ERRORS = ...
ZNAUPD_ERRORS: Final[dict[int, str]]
CNAUPD_ERRORS = ...
DSAUPD_ERRORS: Final[dict[int, str]]
SSAUPD_ERRORS = ...
DNEUPD_ERRORS: Final[dict[int, str]]
SNEUPD_ERRORS: Final[dict[int, str]]
ZNEUPD_ERRORS: Final[dict[int, str]]
CNEUPD_ERRORS: Final[dict[int, str]]
DSEUPD_ERRORS: Final[dict[int, str]]
SSEUPD_ERRORS: Final[dict[int, str]]
class ArpackError(RuntimeError):
    def __init__(self, info, infodict=...) -> None:
        ...
    


class ArpackNoConvergence(ArpackError):
    eigenvalues: Untyped
    eigenvectors: Untyped
    def __init__(self, msg, eigenvalues, eigenvectors) -> None:
        ...
    


def choose_ncv(k) -> Untyped:
    ...

class _ArpackParams:
    resid: Untyped
    sigma: int
    v: Untyped
    iparam: Untyped
    mode: Untyped
    n: Untyped
    tol: Untyped
    k: Untyped
    maxiter: Untyped
    ncv: Untyped
    which: Untyped
    tp: Untyped
    info: Untyped
    converged: bool
    ido: int
    def __init__(self, n, k, tp, mode: int = ..., sigma: Untyped | None = ..., ncv: Untyped | None = ..., v0: Untyped | None = ..., maxiter: Untyped | None = ..., which: str = ..., tol: int = ...) -> None:
        ...
    


class _SymmetricArpackParams(_ArpackParams):
    OP: Untyped
    B: Untyped
    bmat: str
    OPa: Untyped
    OPb: Untyped
    A_matvec: Untyped
    workd: Untyped
    workl: Untyped
    iterate_infodict: Untyped
    extract_infodict: Untyped
    ipntr: Untyped
    def __init__(self, n, k, tp, matvec, mode: int = ..., M_matvec: Untyped | None = ..., Minv_matvec: Untyped | None = ..., sigma: Untyped | None = ..., ncv: Untyped | None = ..., v0: Untyped | None = ..., maxiter: Untyped | None = ..., which: str = ..., tol: int = ...) -> None:
        ...
    
    converged: bool
    def extract(self, return_eigenvectors) -> Untyped:
        ...
    


class _UnsymmetricArpackParams(_ArpackParams):
    OP: Untyped
    B: Untyped
    bmat: str
    OPa: Untyped
    OPb: Untyped
    matvec: Untyped
    workd: Untyped
    workl: Untyped
    iterate_infodict: Untyped
    extract_infodict: Untyped
    ipntr: Untyped
    rwork: Untyped
    def __init__(self, n, k, tp, matvec, mode: int = ..., M_matvec: Untyped | None = ..., Minv_matvec: Untyped | None = ..., sigma: Untyped | None = ..., ncv: Untyped | None = ..., v0: Untyped | None = ..., maxiter: Untyped | None = ..., which: str = ..., tol: int = ...) -> None:
        ...
    
    converged: bool
    def extract(self, return_eigenvectors) -> Untyped:
        ...
    


class SpLuInv(LinearOperator):
    M_lu: Untyped
    isreal: Untyped
    def __init__(self, M) -> None:
        ...
    


class LuInv(LinearOperator):
    M_lu: Untyped
    def __init__(self, M) -> None:
        ...
    


def gmres_loose(A, b, tol) -> Untyped:
    ...

class IterInv(LinearOperator):
    M: Untyped
    ifunc: Untyped
    tol: Untyped
    def __init__(self, M, ifunc=..., tol: int = ...) -> None:
        ...
    


class IterOpInv(LinearOperator):
    A: Untyped
    M: Untyped
    sigma: Untyped
    OP: Untyped
    ifunc: Untyped
    tol: Untyped
    def __init__(self, A, M, sigma, ifunc=..., tol: int = ...) -> None:
        ...
    


def get_inv_matvec(M, hermitian: bool = ..., tol: int = ...) -> Untyped:
    ...

def get_OPinv_matvec(A, M, sigma, hermitian: bool = ..., tol: int = ...) -> Untyped:
    ...

def eigs(A, k: int = ..., M: Untyped | None = ..., sigma: Untyped | None = ..., which: str = ..., v0: Untyped | None = ..., ncv: Untyped | None = ..., maxiter: Untyped | None = ..., tol: int = ..., return_eigenvectors: bool = ..., Minv: Untyped | None = ..., OPinv: Untyped | None = ..., OPpart: Untyped | None = ...) -> Untyped:
    ...

def eigsh(A, k: int = ..., M: Untyped | None = ..., sigma: Untyped | None = ..., which: str = ..., v0: Untyped | None = ..., ncv: Untyped | None = ..., maxiter: Untyped | None = ..., tol: int = ..., return_eigenvectors: bool = ..., Minv: Untyped | None = ..., OPinv: Untyped | None = ..., mode: str = ...) -> Untyped:
    ...

