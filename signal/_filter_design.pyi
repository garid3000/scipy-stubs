"""
This type stub file was generated by pyright.
"""

from scipy._typing import Untyped

class BadCoefficients(UserWarning):
    ...


abs = ...
def findfreqs(num, den, N, kind: str = ...) -> Untyped:
    ...

def freqs(b, a, worN: int = ..., plot: Untyped | None = ...) -> Untyped:
    ...

def freqs_zpk(z, p, k, worN: int = ...) -> Untyped:
    ...

def freqz(b, a: int = ..., worN: int = ..., whole: bool = ..., plot: Untyped | None = ..., fs=..., include_nyquist: bool = ...) -> Untyped:
    ...

def freqz_zpk(z, p, k, worN: int = ..., whole: bool = ..., fs=...) -> Untyped:
    ...

def group_delay(system, w: int = ..., whole: bool = ..., fs=...) -> Untyped:
    ...

def sosfreqz(sos, worN: int = ..., whole: bool = ..., fs=...) -> Untyped:
    ...

def tf2zpk(b, a) -> Untyped:
    ...

def zpk2tf(z, p, k) -> Untyped:
    ...

def tf2sos(b, a, pairing: Untyped | None = ..., *, analog: bool = ...) -> Untyped:
    ...

def sos2tf(sos) -> Untyped:
    ...

def sos2zpk(sos) -> Untyped:
    ...

def zpk2sos(z, p, k, pairing: Untyped | None = ..., *, analog: bool = ...) -> Untyped:
    ...

def normalize(b, a) -> Untyped:
    ...

def lp2lp(b, a, wo: float = ...) -> Untyped:
    ...

def lp2hp(b, a, wo: float = ...) -> Untyped:
    ...

def lp2bp(b, a, wo: float = ..., bw: float = ...) -> Untyped:
    ...

def lp2bs(b, a, wo: float = ..., bw: float = ...) -> Untyped:
    ...

def bilinear(b, a, fs: float = ...) -> Untyped:
    ...

def iirdesign(wp, ws, gpass, gstop, analog: bool = ..., ftype: str = ..., output: str = ..., fs: Untyped | None = ...) -> Untyped:
    ...

def iirfilter(N, Wn, rp: Untyped | None = ..., rs: Untyped | None = ..., btype: str = ..., analog: bool = ..., ftype: str = ..., output: str = ..., fs: Untyped | None = ...) -> Untyped:
    ...

def bilinear_zpk(z, p, k, fs) -> Untyped:
    ...

def lp2lp_zpk(z, p, k, wo: float = ...) -> Untyped:
    ...

def lp2hp_zpk(z, p, k, wo: float = ...) -> Untyped:
    ...

def lp2bp_zpk(z, p, k, wo: float = ..., bw: float = ...) -> Untyped:
    ...

def lp2bs_zpk(z, p, k, wo: float = ..., bw: float = ...) -> Untyped:
    ...

def butter(N, Wn, btype: str = ..., analog: bool = ..., output: str = ..., fs: Untyped | None = ...) -> Untyped:
    ...

def cheby1(N, rp, Wn, btype: str = ..., analog: bool = ..., output: str = ..., fs: Untyped | None = ...) -> Untyped:
    ...

def cheby2(N, rs, Wn, btype: str = ..., analog: bool = ..., output: str = ..., fs: Untyped | None = ...) -> Untyped:
    ...

def ellip(N, rp, rs, Wn, btype: str = ..., analog: bool = ..., output: str = ..., fs: Untyped | None = ...) -> Untyped:
    ...

def bessel(N, Wn, btype: str = ..., analog: bool = ..., output: str = ..., norm: str = ..., fs: Untyped | None = ...) -> Untyped:
    ...

def maxflat():
    ...

def yulewalk():
    ...

def band_stop_obj(wp, ind, passb, stopb, gpass, gstop, type) -> Untyped:
    ...

def buttord(wp, ws, gpass, gstop, analog: bool = ..., fs: Untyped | None = ...) -> Untyped:
    ...

def cheb1ord(wp, ws, gpass, gstop, analog: bool = ..., fs: Untyped | None = ...) -> Untyped:
    ...

def cheb2ord(wp, ws, gpass, gstop, analog: bool = ..., fs: Untyped | None = ...) -> Untyped:
    ...

def ellipord(wp, ws, gpass, gstop, analog: bool = ..., fs: Untyped | None = ...) -> Untyped:
    ...

def buttap(N) -> Untyped:
    ...

def cheb1ap(N, rp) -> Untyped:
    ...

def cheb2ap(N, rs) -> Untyped:
    ...

EPSILON: float
def ellipap(N, rp, rs) -> Untyped:
    ...

def besselap(N, norm: str = ...) -> Untyped:
    ...

def iirnotch(w0, Q, fs: float = ...) -> Untyped:
    ...

def iirpeak(w0, Q, fs: float = ...) -> Untyped:
    ...

def iircomb(w0, Q, ftype: str = ..., fs: float = ..., *, pass_zero: bool = ...) -> Untyped:
    ...

def gammatone(freq, ftype, order: Untyped | None = ..., numtaps: Untyped | None = ..., fs: Untyped | None = ...) -> Untyped:
    ...

filter_dict: Untyped
band_dict: Untyped
bessel_norms: Untyped
