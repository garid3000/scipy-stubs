"""
This type stub file was generated by pyright.
"""

from typing_extensions import override
from scipy._typing import Untyped

dfitpack_int: Untyped
class UnivariateSpline:
    def __init__(self, x, y, /, *, w: Untyped | None = ..., bbox=..., k: int = ..., s: Untyped | None = ..., ext: int = ..., check_finite: bool = ...) -> None:
        ...
    
    @staticmethod
    def validate_input(x, y, w, bbox, k, s, ext, check_finite) -> Untyped:
        ...
    
    def set_smoothing_factor(self, s):
        ...
    
    def __call__(self, x, nu: int = ..., ext: Untyped | None = ...) -> Untyped:
        ...
    
    def get_knots(self) -> Untyped:
        ...
    
    def get_coeffs(self) -> Untyped:
        ...
    
    def get_residual(self) -> Untyped:
        ...
    
    def integral(self, a, b) -> Untyped:
        ...
    
    def derivatives(self, x) -> Untyped:
        ...
    
    def roots(self) -> Untyped:
        ...
    
    def derivative(self, n: int = ...) -> Untyped:
        ...
    
    def antiderivative(self, n: int = ...) -> Untyped:
        ...
    


class InterpolatedUnivariateSpline(UnivariateSpline):
    ...


class LSQUnivariateSpline(UnivariateSpline):
    def __init__(self, x, y, t, /, *, w: Untyped | None = ..., bbox=..., k: int = ..., ext: int = ..., check_finite: bool = ...) -> None:
        ...
    


class _BivariateSplineBase:
    def get_residual(self) -> Untyped:
        ...
    
    def get_knots(self) -> Untyped:
        ...
    
    def get_coeffs(self) -> Untyped:
        ...
    
    def __call__(self, x, y, dx: int = ..., dy: int = ..., /, *, grid: bool = ...) -> Untyped:
        ...
    
    def partial_derivative(self, dx, dy) -> Untyped:
        ...
    


class BivariateSpline(_BivariateSplineBase):
    def ev(self, xi, yi, dx: int = ..., dy: int = ...) -> Untyped:
        ...
    
    def integral(self, xa, xb, ya, yb) -> Untyped:
        ...
    


class _DerivedBivariateSpline(_BivariateSplineBase):
    @property
    def fp(self) -> Untyped:
        ...
    


class SmoothBivariateSpline(BivariateSpline):
    fp: Untyped
    tck: Untyped
    degrees: Untyped
    def __init__(self, x, y, z, /, *, w: Untyped | None = ..., bbox=..., kx: int = ..., ky: int = ..., s: Untyped | None = ..., eps: float = ...) -> None:
        ...
    


class LSQBivariateSpline(BivariateSpline):
    fp: Untyped
    tck: Untyped
    degrees: Untyped
    def __init__(self, x, y, z, /, tx, ty, *, w: Untyped | None = ..., bbox=..., kx: int = ..., ky: int = ..., eps: Untyped | None = ...) -> None:
        ...
    


class RectBivariateSpline(BivariateSpline):
    fp: Untyped
    tck: Untyped
    degrees: Untyped
    def __init__(self, x, y, z, /, *, bbox=..., kx: int = ..., ky: int = ..., s: int = ...) -> None:
        ...
    


class SphereBivariateSpline(_BivariateSplineBase):
    @override
    def __call__(self, theta, phi, dtheta: int = ..., dphi: int = ..., /, *, grid: bool = ...) -> Untyped:
        ...
    
    def ev(self, theta, phi, dtheta: int = ..., dphi: int = ...) -> Untyped:
        ...
    


class SmoothSphereBivariateSpline(SphereBivariateSpline):
    fp: Untyped
    tck: Untyped
    degrees: Untyped
    def __init__(self, theta, phi, r, /, *, w: Untyped | None = ..., s: float = ..., eps: float = ...) -> None:
        ...
    
    @override
    def __call__(self, theta, phi, dtheta: int = ..., dphi: int = ..., /, *, grid: bool = ...) -> Untyped:
        ...
    


class LSQSphereBivariateSpline(SphereBivariateSpline):
    fp: Untyped
    tck: Untyped
    degrees: Untyped
    def __init__(self, theta, phi, r, /, tt, tp, *, w: Untyped | None = ..., eps: float = ...) -> None:
        ...
    
    @override
    def __call__(self, theta, phi, dtheta: int = ..., dphi: int = ..., /, *, grid: bool = ...) -> Untyped:
        ...
    


class RectSphereBivariateSpline(SphereBivariateSpline):
    fp: Untyped
    tck: Untyped
    degrees: Untyped
    v0: Untyped
    def __init__(self, u, v, r, /, s: float = ..., *, pole_continuity: bool = ..., pole_values: Untyped | None = ..., pole_exact: bool = ..., pole_flat: bool = ...) -> None:
        ...
    
    @override
    def __call__(self, theta, phi, dtheta: int = ..., dphi: int = ..., /, *, grid: bool = ...) -> Untyped:
        ...
    


