"""
This type stub file was generated by pyright.
"""

from scipy._typing import Untyped
from ._polyint import _Interpolator1D

def lagrange(x, w) -> Untyped:
    ...

err_mesg: str
class interp2d:
    def __init__(self, x, y, z, kind: str = ..., copy: bool = ..., bounds_error: bool = ..., fill_value: Untyped | None = ...) -> None:
        ...
    


class interp1d(_Interpolator1D):
    bounds_error: Untyped
    copy: Untyped
    axis: Untyped
    y: Untyped
    x: Untyped
    x_bds: Untyped
    def __init__(self, x, y, kind: str = ..., axis: int = ..., copy: bool = ..., bounds_error: Untyped | None = ..., fill_value=..., assume_sorted: bool = ...) -> None:
        ...
    
    @property
    def fill_value(self) -> Untyped:
        ...
    
    @fill_value.setter
    def fill_value(self, fill_value):
        ...
    


class _PPolyBase:
    c: Untyped
    x: Untyped
    extrapolate: Untyped
    axis: Untyped
    def __init__(self, c, x, extrapolate: Untyped | None = ..., axis: int = ...) -> None:
        ...
    
    @classmethod
    def construct_fast(cls, c, x, extrapolate: Untyped | None = ..., axis: int = ...) -> Untyped:
        ...
    
    def extend(self, c, x):
        ...
    
    def __call__(self, x, nu: int = ..., extrapolate: Untyped | None = ...) -> Untyped:
        ...
    


class PPoly(_PPolyBase):
    def derivative(self, nu: int = ...) -> Untyped:
        ...
    
    def antiderivative(self, nu: int = ...) -> Untyped:
        ...
    
    def integrate(self, a, b, extrapolate: Untyped | None = ...) -> Untyped:
        ...
    
    def solve(self, y: float = ..., discontinuity: bool = ..., extrapolate: Untyped | None = ...) -> Untyped:
        ...
    
    def roots(self, discontinuity: bool = ..., extrapolate: Untyped | None = ...) -> Untyped:
        ...
    
    @classmethod
    def from_spline(cls, tck, extrapolate: Untyped | None = ...) -> Untyped:
        ...
    
    @classmethod
    def from_bernstein_basis(cls, bp, extrapolate: Untyped | None = ...) -> Untyped:
        ...
    


class BPoly(_PPolyBase):
    def derivative(self, nu: int = ...) -> Untyped:
        ...
    
    def antiderivative(self, nu: int = ...) -> Untyped:
        ...
    
    def integrate(self, a, b, extrapolate: Untyped | None = ...) -> Untyped:
        ...
    
    c: Untyped
    def extend(self, c, x) -> Untyped:
        ...
    
    @classmethod
    def from_power_basis(cls, pp, extrapolate: Untyped | None = ...) -> Untyped:
        ...
    
    @classmethod
    def from_derivatives(cls, xi, yi, orders: Untyped | None = ..., extrapolate: Untyped | None = ...) -> Untyped:
        ...
    


class NdPPoly:
    x: Untyped
    c: Untyped
    extrapolate: Untyped
    def __init__(self, c, x, extrapolate: Untyped | None = ...) -> None:
        ...
    
    @classmethod
    def construct_fast(cls, c, x, extrapolate: Untyped | None = ...) -> Untyped:
        ...
    
    def __call__(self, x, nu: Untyped | None = ..., extrapolate: Untyped | None = ...) -> Untyped:
        ...
    
    def derivative(self, nu) -> Untyped:
        ...
    
    def antiderivative(self, nu) -> Untyped:
        ...
    
    def integrate_1d(self, a, b, axis, extrapolate: Untyped | None = ...) -> Untyped:
        ...
    
    def integrate(self, ranges, extrapolate: Untyped | None = ...) -> Untyped:
        ...
    


