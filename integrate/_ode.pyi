"""
This type stub file was generated by pyright.
"""

import numpy as np
import numpy.typing as npt
import optype.numpy as onpt
from collections.abc import Callable, Sequence
from typing import Any, ClassVar, Final, Generic, Literal, Protocol, TypeAlias, type_check_only
from typing_extensions import Self, TypeVarTuple, Unpack, override
from scipy._typing import Untyped, UntypedCallable, UntypedTuple

__all__ = ["complex_ode", "ode"]
_Ts = TypeVarTuple("_Ts", default=Unpack[tuple[()]])
@type_check_only
class _ODEFuncF(Protocol[Unpack[_Ts]]):
    def __call__(self, t: float, y: float | npt.NDArray[np.float64], /, *args: Unpack[_Ts]) -> float | npt.NDArray[np.floating[Any]]:
        ...
    


@type_check_only
class _ODEFuncC(Protocol[Unpack[_Ts]]):
    def __call__(self, t: float, y: complex | npt.NDArray[np.complex128], /, *args: Unpack[_Ts]) -> complex | npt.NDArray[np.complexfloating[Any, Any]]:
        ...
    


_SolOutFunc: TypeAlias = Callable[[float, onpt.Array[tuple[int], np.inexact[Any]]], Literal[0, -1]]
class ode(Generic[Unpack[_Ts]]):
    stiff: int
    f: _ODEFuncF[Unpack[_Ts]]
    jac: _ODEFuncF[Unpack[_Ts]] | None
    f_params: tuple[()] | tuple[Unpack[_Ts]]
    jac_params: tuple[()] | tuple[Unpack[_Ts]]
    t: float
    def __init__(self, /, f: _ODEFuncF[Unpack[_Ts]], jac: _ODEFuncF[Unpack[_Ts]] | None = ...) -> None:
        ...
    
    @property
    def y(self, /) -> float:
        ...
    
    def integrate(self, /, t: float, step: bool = ..., relax: bool = ...) -> float:
        ...
    
    def set_initial_value(self, /, y: onpt.AnyInexactArray | Sequence[Sequence[complex]] | complex, t: float = ...) -> Self:
        ...
    
    def set_integrator(self, /, name: str, **integrator_params: Untyped) -> Self:
        ...
    
    def set_f_params(self, /, *args: Unpack[_Ts]) -> Self:
        ...
    
    def set_jac_params(self, /, *args: Unpack[_Ts]) -> Self:
        ...
    
    def set_solout(self, /, solout: _SolOutFunc) -> None:
        ...
    
    def get_return_code(self, /) -> Literal[-7, -6, -5, -4, -3, -2, -1, 1, 2]:
        ...
    
    def successful(self, /) -> bool:
        ...
    


class complex_ode(ode[Unpack[_Ts]], Generic[Unpack[_Ts]]):
    cf: _ODEFuncC[Unpack[_Ts]]
    cjac: _ODEFuncC[Unpack[_Ts]] | None
    tmp: onpt.Array[tuple[int], np.float64]
    def __init__(self, /, f: _ODEFuncC[Unpack[_Ts]], jac: _ODEFuncC[Unpack[_Ts]] | None = ...) -> None:
        ...
    
    @property
    @override
    def y(self, /) -> complex:
        ...
    
    @override
    def integrate(self, /, t: float, step: bool = ..., relax: bool = ...) -> complex:
        ...
    


def find_integrator(name: str) -> type[IntegratorBase] | None:
    ...

class IntegratorConcurrencyError(RuntimeError):
    def __init__(self, /, name: str) -> None:
        ...
    


class IntegratorBase:
    runner: ClassVar[Callable[..., object] | None]
    supports_run_relax: ClassVar[Literal[0, 1, None]] = ...
    supports_step: ClassVar[Literal[0, 1, None]] = ...
    supports_solout: ClassVar[bool]
    scalar: ClassVar[type] = ...
    handle: ClassVar[int]
    success: Literal[0, 1] | None = ...
    integrator_classes: list[type[IntegratorBase]]
    istate: int | None = ...
    def acquire_new_handle(self, /) -> None:
        ...
    
    def check_handle(self, /) -> None:
        ...
    
    def reset(self, /, n: int, has_jac: bool) -> None:
        ...
    
    def run(self, /, f: UntypedCallable, jac: UntypedCallable, y0: complex, t0: float, t1: float, f_params: UntypedTuple, jac_params: UntypedTuple) -> tuple[Untyped, float]:
        ...
    
    def step(self, /, f: UntypedCallable, jac: UntypedCallable, y0: complex, t0: float, t1: float, f_params: UntypedTuple, jac_params: UntypedTuple) -> tuple[Untyped, float]:
        ...
    
    def run_relax(self, /, f: UntypedCallable, jac: UntypedCallable, y0: complex, t0: float, t1: float, f_params: UntypedTuple, jac_params: UntypedTuple) -> tuple[Untyped, float]:
        ...
    


class vode(IntegratorBase):
    messages: ClassVar[dict[int, str]]
    active_global_handle: int
    meth: int
    with_jacobian: Untyped
    rtol: Untyped
    atol: Untyped
    mu: Untyped
    ml: Untyped
    order: Untyped
    nsteps: Untyped
    max_step: Untyped
    min_step: Untyped
    first_step: Untyped
    initialized: bool
    rwork: Untyped
    iwork: Untyped
    call_args: Untyped
    def __init__(self, /, method: str = ..., with_jacobian: bool = ..., rtol: float = ..., atol: float = ..., lband: Untyped | None = ..., uband: Untyped | None = ..., order: int = ..., nsteps: int = ..., max_step: float = ..., min_step: float = ..., first_step: float = ...) -> None:
        ...
    


class zvode(vode):
    active_global_handle: int
    zwork: Untyped
    rwork: Untyped
    iwork: Untyped
    call_args: Untyped
    initialized: bool
    ...


class dopri5(IntegratorBase):
    name: ClassVar = ...
    messages: ClassVar[dict[int, str]]
    rtol: Final[float]
    atol: Final[float]
    nsteps: Final[int]
    max_step: Final[float]
    first_step: Final[float]
    safety: Final[float]
    ifactor: Final[float]
    dfactor: Final[float]
    beta: Final[float]
    verbosity: Final[int]
    solout: Callable[[float, onpt.Array[tuple[int], np.inexact[Any]]], Literal[0, -1]] | None
    solout_cmplx: bool
    iout: int
    work: onpt.Array[tuple[int], np.float64]
    iwork: onpt.Array[tuple[int], np.int32]
    call_args: Untyped
    def __init__(self, /, rtol: float = ..., atol: float = ..., nsteps: int = ..., max_step: float = ..., first_step: float = ..., safety: float = ..., ifactor: float = ..., dfactor: float = ..., beta: float = ..., method: Untyped | None = ..., verbosity: int = ...) -> None:
        ...
    
    def set_solout(self, solout: _SolOutFunc | None, complex: bool = ...) -> None:
        ...
    


class dop853(dopri5):
    name: ClassVar = ...
    def __init__(self, rtol: float = ..., atol: float = ..., nsteps: int = ..., max_step: float = ..., first_step: float = ..., safety: float = ..., ifactor: float = ..., dfactor: float = ..., beta: float = ..., method: Untyped | None = ..., verbosity: int = ...) -> None:
        ...
    
    call_args: Untyped


class lsoda(IntegratorBase):
    active_global_handle: ClassVar[int] = ...
    messages: ClassVar[dict[int, str]]
    with_jacobian: Final[bool]
    rtol: Final[float]
    atol: Final[float]
    mu: Final[float | None]
    ml: Final[float | None]
    max_order_ns: Final[int]
    max_order_s: Final[int]
    nsteps: Final[int]
    max_step: Final[float]
    min_step: Final[float]
    first_step: Final[float]
    ixpr: Final[int]
    max_hnil: Final[int]
    initialized: Final[bool]
    rwork: onpt.Array[tuple[int], np.float64]
    iwork: onpt.Array[tuple[int], np.int32]
    call_args: list[float | onpt.Array[tuple[int], np.float64] | onpt.Array[tuple[int], np.int32]]
    def __init__(self, /, with_jacobian: bool = ..., rtol: float = ..., atol: float = ..., lband: float | None = ..., uband: float | None = ..., nsteps: int = ..., max_step: float = ..., min_step: float = ..., first_step: float = ..., ixpr: int = ..., max_hnil: int = ..., max_order_ns: int = ..., max_order_s: int = ..., method: Untyped | None = ...) -> None:
        ...
    


