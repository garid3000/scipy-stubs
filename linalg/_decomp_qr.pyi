"""
This type stub file was generated by pyright.
"""

import numpy as np
import numpy.typing as npt
import optype.numpy as onpt
from collections.abc import Sequence
from typing import Any, Literal, TypeAlias, overload

__all__ = ["qr", "qr_multiply", "rq"]
_ArrayLike_2d_fc: TypeAlias = onpt.AnyNumberArray | Sequence[Sequence[complex | np.number[Any]]]
_Array_i_1d: TypeAlias = onpt.Array[tuple[int], np.int_]
_Array_fc_2d: TypeAlias = onpt.Array[tuple[int, int], np.inexact[npt.NBitBase]]
@overload
def qr(a: _ArrayLike_2d_fc, overwrite_a: bool = ..., lwork: int | None = ..., mode: Literal["full", "economic"] = ..., pivoting: Literal[False] = ..., check_finite: bool = ...) -> tuple[_Array_fc_2d, _Array_fc_2d]:
    ...

@overload
def qr(a: _ArrayLike_2d_fc, overwrite_a: bool, lwork: int | None, mode: Literal["r"], pivoting: Literal[False] = ..., check_finite: bool = ...) -> tuple[_Array_fc_2d]:
    ...

@overload
def qr(a: _ArrayLike_2d_fc, overwrite_a: bool = ..., lwork: int | None = ..., *, mode: Literal["r"], pivoting: Literal[False] = ..., check_finite: bool = ...) -> tuple[_Array_fc_2d]:
    ...

@overload
def qr(a: _ArrayLike_2d_fc, overwrite_a: bool, lwork: int | None, mode: Literal["raw"], pivoting: Literal[False] = ..., check_finite: bool = ...) -> tuple[tuple[_Array_fc_2d, _Array_fc_2d], _Array_fc_2d]:
    ...

@overload
def qr(a: _ArrayLike_2d_fc, overwrite_a: bool = ..., lwork: int | None = ..., *, mode: Literal["raw"], pivoting: Literal[False] = ..., check_finite: bool = ...) -> tuple[tuple[_Array_fc_2d, _Array_fc_2d], _Array_fc_2d]:
    ...

@overload
def qr(a: _ArrayLike_2d_fc, overwrite_a: bool, lwork: int | None, mode: Literal["full", "economic"], pivoting: Literal[True], check_finite: bool = ...) -> tuple[_Array_fc_2d, _Array_fc_2d, _Array_i_1d]:
    ...

@overload
def qr(a: _ArrayLike_2d_fc, overwrite_a: bool = ..., lwork: int | None = ..., mode: Literal["full", "economic"] = ..., *, pivoting: Literal[True], check_finite: bool = ...) -> tuple[_Array_fc_2d, _Array_fc_2d, _Array_i_1d]:
    ...

@overload
def qr(a: _ArrayLike_2d_fc, overwrite_a: bool, lwork: int | None, mode: Literal["r"], pivoting: Literal[True], check_finite: bool = ...) -> tuple[_Array_fc_2d, _Array_i_1d]:
    ...

@overload
def qr(a: _ArrayLike_2d_fc, overwrite_a: bool = ..., lwork: int | None = ..., *, mode: Literal["r"], pivoting: Literal[True], check_finite: bool = ...) -> tuple[_Array_fc_2d, _Array_i_1d]:
    ...

@overload
def qr(a: _ArrayLike_2d_fc, overwrite_a: bool, lwork: int | None, mode: Literal["raw"], pivoting: Literal[True], check_finite: bool = ...) -> tuple[tuple[_Array_fc_2d, _Array_fc_2d], _Array_fc_2d, _Array_i_1d]:
    ...

@overload
def qr(a: _ArrayLike_2d_fc, overwrite_a: bool = ..., lwork: int | None = ..., *, mode: Literal["raw"], pivoting: Literal[True], check_finite: bool = ...) -> tuple[tuple[_Array_fc_2d, _Array_fc_2d], _Array_fc_2d, _Array_i_1d]:
    ...

@overload
def qr_multiply(a: _ArrayLike_2d_fc, c: npt.ArrayLike, mode: Literal["left", "right"] = ..., pivoting: Literal[False] = ..., conjugate: bool = ..., overwrite_a: bool = ..., overwrite_c: bool = ...) -> tuple[_Array_fc_2d, _Array_fc_2d]:
    ...

@overload
def qr_multiply(a: _ArrayLike_2d_fc, c: npt.ArrayLike, mode: Literal["left", "right"], pivoting: Literal[True], conjugate: bool = ..., overwrite_a: bool = ..., overwrite_c: bool = ...) -> tuple[_Array_fc_2d, _Array_fc_2d, _Array_i_1d]:
    ...

@overload
def qr_multiply(a: _ArrayLike_2d_fc, c: npt.ArrayLike, mode: Literal["left", "right"] = ..., *, pivoting: Literal[True], conjugate: bool = ..., overwrite_a: bool = ..., overwrite_c: bool = ...) -> tuple[_Array_fc_2d, _Array_fc_2d, _Array_i_1d]:
    ...

@overload
def rq(a: _ArrayLike_2d_fc, overwrite_a: bool = ..., lwork: int | None = ..., mode: Literal["full", "economic"] = ..., check_finite: bool = ...) -> tuple[_Array_fc_2d, _Array_fc_2d]:
    ...

@overload
def rq(a: _ArrayLike_2d_fc, overwrite_a: bool, lwork: int | None, mode: Literal["r"], check_finite: bool = ...) -> _Array_fc_2d:
    ...

@overload
def rq(a: _ArrayLike_2d_fc, overwrite_a: bool = ..., lwork: int | None = ..., *, mode: Literal["r"], check_finite: bool = ...) -> _Array_fc_2d:
    ...

