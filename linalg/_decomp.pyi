"""
This type stub file was generated by pyright.
"""

import numpy as np
import numpy.typing as npt
import optype as op
import scipy._typing as spt
from typing import Literal, TypeAlias, overload

__all__ = ["cdf2rdf", "eig", "eig_banded", "eigh", "eigh_tridiagonal", "eigvals", "eigvals_banded", "eigvalsh", "eigvalsh_tridiagonal", "hessenberg"]
_Array_f: TypeAlias = np.ndarray[tuple[int, ...], np.dtype[np.floating[npt.NBitBase]]]
_Array_fc_1d: TypeAlias = np.ndarray[tuple[int], np.dtype[np.inexact[npt.NBitBase]]]
_Array_fc_2d: TypeAlias = np.ndarray[tuple[int, int], np.dtype[np.inexact[npt.NBitBase]]]
_EigSelect: TypeAlias = Literal["a", "v", "i"]
_EigSelectRange: TypeAlias = tuple[spt.AnyReal, spt.AnyReal]
_EigHType: TypeAlias = Literal[1, 2, 3]
_EigHSubsetByIndex: TypeAlias = op.CanIter[op.CanNext[op.typing.AnyInt]]
_EigHSubsetByValue: TypeAlias = op.CanIter[op.CanNext[spt.AnyReal]]
_LapackDriverE: TypeAlias = Literal["ev", "evd", "evr", "evx"]
_LapackDriverG: TypeAlias = Literal["gv", "gvd", "gvx"]
_LapackDriverST: TypeAlias = Literal["stemr", "stebz", "sterf", "stev"]
_LapackDriverAuto: TypeAlias = Literal["auto"]
@overload
def eig(a: npt.ArrayLike, b: npt.ArrayLike | None = ..., left: Literal[False] = ..., right: Literal[False] = ..., overwrite_a: bool = ..., overwrite_b: bool = ..., check_finite: bool = ..., homogeneous_eigvals: bool = ...) -> _Array_fc_1d | _Array_fc_2d:
    ...

@overload
def eig(a: npt.ArrayLike, b: npt.ArrayLike | None = ..., *, left: Literal[True], right: Literal[False] = ..., overwrite_a: bool = ..., overwrite_b: bool = ..., check_finite: bool = ..., homogeneous_eigvals: bool = ...) -> tuple[_Array_fc_1d | _Array_fc_2d, _Array_fc_2d]:
    ...

@overload
def eig(a: npt.ArrayLike, b: npt.ArrayLike | None, left: Literal[True], right: Literal[False] = ..., overwrite_a: bool = ..., overwrite_b: bool = ..., check_finite: bool = ..., homogeneous_eigvals: bool = ...) -> tuple[_Array_fc_1d | _Array_fc_2d, _Array_fc_2d]:
    ...

@overload
def eig(a: npt.ArrayLike, b: npt.ArrayLike | None = ..., left: Literal[False] = ..., *, right: Literal[True], overwrite_a: bool = ..., overwrite_b: bool = ..., check_finite: bool = ..., homogeneous_eigvals: bool = ...) -> tuple[_Array_fc_1d | _Array_fc_2d, _Array_fc_2d]:
    ...

@overload
def eig(a: npt.ArrayLike, b: npt.ArrayLike | None, left: Literal[False], right: Literal[True], overwrite_a: bool = ..., overwrite_b: bool = ..., check_finite: bool = ..., homogeneous_eigvals: bool = ...) -> tuple[_Array_fc_1d | _Array_fc_2d, _Array_fc_2d]:
    ...

@overload
def eig(a: npt.ArrayLike, b: npt.ArrayLike | None = ..., *, left: Literal[True], right: Literal[True], overwrite_a: bool = ..., overwrite_b: bool = ..., check_finite: bool = ..., homogeneous_eigvals: bool = ...) -> tuple[_Array_fc_1d | _Array_fc_2d, _Array_fc_2d, _Array_fc_2d]:
    ...

@overload
def eig(a: npt.ArrayLike, b: npt.ArrayLike | None, left: Literal[True], right: Literal[True], overwrite_a: bool = ..., overwrite_b: bool = ..., check_finite: bool = ..., homogeneous_eigvals: bool = ...) -> tuple[_Array_fc_1d | _Array_fc_2d, _Array_fc_2d, _Array_fc_2d]:
    ...

@overload
def eigh(a: npt.ArrayLike, b: npt.ArrayLike | None = ..., *, lower: bool = ..., eigvals_only: Literal[False] = ..., overwrite_a: bool = ..., overwrite_b: bool = ..., type: _EigHType = ..., check_finite: bool = ..., subset_by_index: _EigHSubsetByIndex | None = ..., subset_by_value: _EigHSubsetByValue | None = ..., driver: _LapackDriverE | _LapackDriverG | None = ...) -> tuple[_Array_fc_1d, _Array_fc_2d]:
    ...

@overload
def eigh(a: npt.ArrayLike, b: npt.ArrayLike | None = ..., *, lower: bool = ..., eigvals_only: Literal[True], overwrite_a: bool = ..., overwrite_b: bool = ..., type: _EigHType = ..., check_finite: bool = ..., subset_by_index: _EigHSubsetByIndex | None = ..., subset_by_value: _EigHSubsetByValue | None = ..., driver: _LapackDriverE | _EigHSubsetByValue | None = ...) -> _Array_fc_1d:
    ...

@overload
def eig_banded(a_band: npt.ArrayLike, lower: bool = ..., eigvals_only: Literal[False] = ..., overwrite_a_band: bool = ..., select: _EigSelect = ..., select_range: _EigSelectRange | None = ..., max_ev: int = ..., check_finite: bool = ...) -> tuple[_Array_fc_1d, _Array_fc_2d]:
    ...

@overload
def eig_banded(a_band: npt.ArrayLike, lower: bool = ..., *, eigvals_only: Literal[True], overwrite_a_band: bool = ..., select: _EigSelect = ..., select_range: _EigSelectRange | None = ..., max_ev: int = ..., check_finite: bool = ...) -> _Array_fc_1d:
    ...

@overload
def eig_banded(a_band: npt.ArrayLike, lower: bool, eigvals_only: Literal[True], overwrite_a_band: bool = ..., select: _EigSelect = ..., select_range: _EigSelectRange | None = ..., max_ev: int = ..., check_finite: bool = ...) -> _Array_fc_1d:
    ...

def eigvals(a: npt.ArrayLike, b: npt.ArrayLike | None = ..., overwrite_a: bool = ..., check_finite: bool = ..., homogeneous_eigvals: bool = ...) -> _Array_fc_1d | _Array_fc_2d:
    ...

def eigvalsh(a: npt.ArrayLike, b: npt.ArrayLike | None = ..., *, lower: bool = ..., overwrite_a: bool = ..., overwrite_b: bool = ..., type: _EigHType = ..., check_finite: bool = ..., subset_by_index: _EigHSubsetByIndex | None = ..., subset_by_value: _EigHSubsetByValue | None = ..., driver: _LapackDriverE | _EigHSubsetByValue | None = ...) -> _Array_fc_1d:
    ...

def eigvals_banded(a_band: npt.ArrayLike, lower: bool = ..., overwrite_a_band: bool = ..., select: _EigSelect = ..., select_range: _EigSelectRange | None = ..., check_finite: bool = ...) -> _Array_fc_1d:
    ...

def eigvalsh_tridiagonal(d: npt.ArrayLike, e: npt.ArrayLike, select: _EigSelect = ..., select_range: _EigSelectRange | None = ..., check_finite: bool = ..., tol: spt.AnyReal = ..., lapack_driver: _LapackDriverST | _LapackDriverAuto = ...) -> _Array_fc_1d:
    ...

@overload
def eigh_tridiagonal(d: npt.ArrayLike, e: npt.ArrayLike, eigvals_only: Literal[False] = ..., select: _EigSelect = ..., select_range: _EigSelectRange | None = ..., check_finite: bool = ..., tol: spt.AnyReal = ..., lapack_driver: _LapackDriverST | _LapackDriverAuto = ...) -> tuple[_Array_fc_1d, _Array_fc_2d]:
    ...

@overload
def eigh_tridiagonal(d: npt.ArrayLike, e: npt.ArrayLike, eigvals_only: Literal[True], select: _EigSelect = ..., select_range: _EigSelectRange | None = ..., check_finite: bool = ..., tol: spt.AnyReal = ..., lapack_driver: _LapackDriverST | _LapackDriverAuto = ...) -> _Array_fc_1d:
    ...

@overload
def hessenberg(a: npt.ArrayLike, calc_q: Literal[False] = ..., overwrite_a: bool = ..., check_finite: bool = ...) -> _Array_fc_2d:
    ...

@overload
def hessenberg(a: npt.ArrayLike, calc_q: Literal[True], overwrite_a: bool = ..., check_finite: bool = ...) -> tuple[_Array_fc_2d, _Array_fc_2d]:
    ...

def cdf2rdf(w: npt.ArrayLike, v: npt.ArrayLike) -> tuple[_Array_f, _Array_f]:
    ...

