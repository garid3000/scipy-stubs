"""
This type stub file was generated by pyright.
"""

from scipy._typing import Untyped

def correlate1d(input, weights, axis: int = ..., output: Untyped | None = ..., mode: str = ..., cval: float = ..., origin: int = ...) -> Untyped:
    ...

def convolve1d(input, weights, axis: int = ..., output: Untyped | None = ..., mode: str = ..., cval: float = ..., origin: int = ...) -> Untyped:
    ...

def gaussian_filter1d(input, sigma, axis: int = ..., order: int = ..., output: Untyped | None = ..., mode: str = ..., cval: float = ..., truncate: float = ..., *, radius: Untyped | None = ...) -> Untyped:
    ...

def gaussian_filter(input, sigma, order: int = ..., output: Untyped | None = ..., mode: str = ..., cval: float = ..., truncate: float = ..., *, radius: Untyped | None = ..., axes: Untyped | None = ...) -> Untyped:
    ...

def prewitt(input, axis: int = ..., output: Untyped | None = ..., mode: str = ..., cval: float = ...) -> Untyped:
    ...

def sobel(input, axis: int = ..., output: Untyped | None = ..., mode: str = ..., cval: float = ...) -> Untyped:
    ...

def generic_laplace(input, derivative2, output: Untyped | None = ..., mode: str = ..., cval: float = ..., extra_arguments=..., extra_keywords: Untyped | None = ...) -> Untyped:
    ...

def laplace(input, output: Untyped | None = ..., mode: str = ..., cval: float = ...) -> Untyped:
    ...

def gaussian_laplace(input, sigma, output: Untyped | None = ..., mode: str = ..., cval: float = ..., **kwargs) -> Untyped:
    ...

def generic_gradient_magnitude(input, derivative, output: Untyped | None = ..., mode: str = ..., cval: float = ..., extra_arguments=..., extra_keywords: Untyped | None = ...) -> Untyped:
    ...

def gaussian_gradient_magnitude(input, sigma, output: Untyped | None = ..., mode: str = ..., cval: float = ..., **kwargs) -> Untyped:
    ...

def correlate(input, weights, output: Untyped | None = ..., mode: str = ..., cval: float = ..., origin: int = ...) -> Untyped:
    ...

def convolve(input, weights, output: Untyped | None = ..., mode: str = ..., cval: float = ..., origin: int = ...) -> Untyped:
    ...

def uniform_filter1d(input, size, axis: int = ..., output: Untyped | None = ..., mode: str = ..., cval: float = ..., origin: int = ...) -> Untyped:
    ...

def uniform_filter(input, size: int = ..., output: Untyped | None = ..., mode: str = ..., cval: float = ..., origin: int = ..., *, axes: Untyped | None = ...) -> Untyped:
    ...

def minimum_filter1d(input, size, axis: int = ..., output: Untyped | None = ..., mode: str = ..., cval: float = ..., origin: int = ...) -> Untyped:
    ...

def maximum_filter1d(input, size, axis: int = ..., output: Untyped | None = ..., mode: str = ..., cval: float = ..., origin: int = ...) -> Untyped:
    ...

def minimum_filter(input, size: Untyped | None = ..., footprint: Untyped | None = ..., output: Untyped | None = ..., mode: str = ..., cval: float = ..., origin: int = ..., *, axes: Untyped | None = ...) -> Untyped:
    ...

def maximum_filter(input, size: Untyped | None = ..., footprint: Untyped | None = ..., output: Untyped | None = ..., mode: str = ..., cval: float = ..., origin: int = ..., *, axes: Untyped | None = ...) -> Untyped:
    ...

def rank_filter(input, rank, size: Untyped | None = ..., footprint: Untyped | None = ..., output: Untyped | None = ..., mode: str = ..., cval: float = ..., origin: int = ..., *, axes: Untyped | None = ...) -> Untyped:
    ...

def median_filter(input, size: Untyped | None = ..., footprint: Untyped | None = ..., output: Untyped | None = ..., mode: str = ..., cval: float = ..., origin: int = ..., *, axes: Untyped | None = ...) -> Untyped:
    ...

def percentile_filter(input, percentile, size: Untyped | None = ..., footprint: Untyped | None = ..., output: Untyped | None = ..., mode: str = ..., cval: float = ..., origin: int = ..., *, axes: Untyped | None = ...) -> Untyped:
    ...

def generic_filter1d(input, function, filter_size, axis: int = ..., output: Untyped | None = ..., mode: str = ..., cval: float = ..., origin: int = ..., extra_arguments=..., extra_keywords: Untyped | None = ...) -> Untyped:
    ...

def generic_filter(input, function, size: Untyped | None = ..., footprint: Untyped | None = ..., output: Untyped | None = ..., mode: str = ..., cval: float = ..., origin: int = ..., extra_arguments=..., extra_keywords: Untyped | None = ...) -> Untyped:
    ...

