"""
This type stub file was generated by pyright.
"""

import numpy as np
import numpy.typing as npt
from typing import Any, Generic, Literal, TypeAlias, TypeVar, overload
from scipy._typing import AnyScalar
from scipy.sparse import coo_matrix, dok_matrix

__all__ = ["cKDTree"]
_Weights: TypeAlias = npt.ArrayLike | tuple[npt.ArrayLike, npt.ArrayLike]
_BoxT = TypeVar("_BoxT", bound=npt.NDArray[np.float64] | None)
class cKDTreeNode:
    @property
    def data_points(self) -> npt.NDArray[np.float64]:
        ...
    
    @property
    def indices(self) -> npt.NDArray[np.intp]:
        ...
    
    @property
    def level(self) -> int:
        ...
    
    @property
    def split_dim(self) -> int:
        ...
    
    @property
    def children(self) -> int:
        ...
    
    @property
    def start_idx(self) -> int:
        ...
    
    @property
    def end_idx(self) -> int:
        ...
    
    @property
    def split(self) -> float:
        ...
    
    @property
    def lesser(self) -> cKDTreeNode | None:
        ...
    
    @property
    def greater(self) -> cKDTreeNode | None:
        ...
    


class cKDTree(Generic[_BoxT]):
    @property
    def n(self) -> int:
        ...
    
    @property
    def m(self) -> int:
        ...
    
    @property
    def leafsize(self) -> int:
        ...
    
    @property
    def size(self) -> int:
        ...
    
    @property
    def tree(self) -> cKDTreeNode:
        ...
    
    @property
    def data(self) -> npt.NDArray[np.float64]:
        ...
    
    @property
    def maxes(self) -> npt.NDArray[np.float64]:
        ...
    
    @property
    def mins(self) -> npt.NDArray[np.float64]:
        ...
    
    @property
    def indices(self) -> npt.NDArray[np.float64]:
        ...
    
    @property
    def boxsize(self) -> _BoxT:
        ...
    
    @overload
    def __new__(cls, data: npt.ArrayLike, leafsize: int = ..., compact_nodes: bool = ..., copy_data: bool = ..., balanced_tree: bool = ..., boxsize: None = ...) -> cKDTree[None]:
        ...
    
    @overload
    def __new__(cls, data: npt.ArrayLike, leafsize: int = ..., compact_nodes: bool = ..., copy_data: bool = ..., balanced_tree: bool = ..., boxsize: npt.ArrayLike = ...) -> cKDTree[npt.NDArray[np.float64]]:
        ...
    
    def query(self, x: npt.ArrayLike, k: npt.ArrayLike = ..., eps: float = ..., p: float = ..., distance_upper_bound: float = ..., workers: int | None = ...) -> tuple[Any, Any]:
        ...
    
    def query_ball_point(self, x: npt.ArrayLike, r: npt.ArrayLike, p: float = ..., eps: float = ..., workers: int | None = ..., return_sorted: bool | None = ..., return_length: bool = ...) -> Any:
        ...
    
    def query_ball_tree(self, other: cKDTree[npt.NDArray[np.float64] | None], r: float, p: float, eps: float = ...) -> list[list[int]]:
        ...
    
    @overload
    def query_pairs(self, r: float, p: float = ..., eps: float = ..., output_type: Literal["set"] = ...) -> set[tuple[int, int]]:
        ...
    
    @overload
    def query_pairs(self, r: float, p: float = ..., eps: float = ..., output_type: Literal["ndarray"] = ...) -> npt.NDArray[np.intp]:
        ...
    
    @overload
    def count_neighbors(self, other: cKDTree[npt.NDArray[np.float64] | None], r: AnyScalar, p: float = ..., weights: None | tuple[None, None] = ..., cumulative: bool = ...) -> np.intp:
        ...
    
    @overload
    def count_neighbors(self, other: cKDTree[npt.NDArray[np.float64] | None], r: AnyScalar, p: float = ..., weights: _Weights = ..., cumulative: bool = ...) -> np.float64:
        ...
    
    @overload
    def count_neighbors(self, other: cKDTree[npt.NDArray[np.float64] | None], r: npt.ArrayLike, p: float = ..., weights: None | tuple[None, None] = ..., cumulative: bool = ...) -> np.float64 | np.intp | npt.NDArray[np.intp]:
        ...
    
    @overload
    def count_neighbors(self, other: cKDTree[npt.NDArray[np.float64] | None], r: npt.ArrayLike, p: float = ..., weights: _Weights = ..., cumulative: bool = ...) -> np.intp | np.float64 | npt.NDArray[np.float64]:
        ...
    
    @overload
    def sparse_distance_matrix(self, other: cKDTree[npt.NDArray[np.float64] | None], max_distance: float, p: float = ..., output_type: Literal["dok_matrix"] = ...) -> dok_matrix:
        ...
    
    @overload
    def sparse_distance_matrix(self, other: cKDTree[npt.NDArray[np.float64] | None], max_distance: float, p: float = ..., *, output_type: Literal["coo_matrix"]) -> coo_matrix:
        ...
    
    @overload
    def sparse_distance_matrix(self, other: cKDTree[npt.NDArray[np.float64] | None], max_distance: float, p: float = ..., *, output_type: Literal["dict"]) -> dict[tuple[int, int], float]:
        ...
    
    @overload
    def sparse_distance_matrix(self, other: cKDTree[npt.NDArray[np.float64] | None], max_distance: float, p: float = ..., *, output_type: Literal["ndarray"]) -> npt.NDArray[np.void]:
        ...
    


