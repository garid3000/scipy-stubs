"""
This type stub file was generated by pyright.
"""

from scipy._lib._util import _RichResult
from scipy._typing import Untyped

__all__ = ["OptimizeResult", "OptimizeWarning", "approx_fprime", "bracket", "brent", "brute", "check_grad", "fmin", "fmin_bfgs", "fmin_cg", "fmin_ncg", "fmin_powell", "fminbound", "golden", "line_search", "rosen", "rosen_der", "rosen_hess", "rosen_hess_prod", "show_options"]
class MemoizeJac:
    fun: Untyped
    jac: Untyped
    x: Untyped
    def __init__(self, fun) -> None:
        ...
    
    def __call__(self, x, *args) -> Untyped:
        ...
    
    def derivative(self, x, *args) -> Untyped:
        ...
    


class OptimizeResult(_RichResult):
    ...


class OptimizeWarning(UserWarning):
    ...


def is_finite_scalar(x) -> Untyped:
    ...

def vecnorm(x, ord: int = ...) -> Untyped:
    ...

def rosen(x) -> Untyped:
    ...

def rosen_der(x) -> Untyped:
    ...

def rosen_hess(x) -> Untyped:
    ...

def rosen_hess_prod(x, p) -> Untyped:
    ...

class _MaxFuncCallError(RuntimeError):
    ...


def fmin(func, x0, args=..., xtol: float = ..., ftol: float = ..., maxiter: Untyped | None = ..., maxfun: Untyped | None = ..., full_output: int = ..., disp: int = ..., retall: int = ..., callback: Untyped | None = ..., initial_simplex: Untyped | None = ...) -> Untyped:
    ...

def approx_fprime(xk, f, epsilon=..., *args) -> Untyped:
    ...

def check_grad(func, grad, x0, *args, epsilon=..., direction: str = ..., seed: Untyped | None = ...) -> Untyped:
    ...

def approx_fhess_p(x0, p, fprime, epsilon, *args) -> Untyped:
    ...

class _LineSearchError(RuntimeError):
    ...


def fmin_bfgs(f, x0, fprime: Untyped | None = ..., args=..., gtol: float = ..., norm=..., epsilon=..., maxiter: Untyped | None = ..., full_output: int = ..., disp: int = ..., retall: int = ..., callback: Untyped | None = ..., xrtol: int = ..., c1: float = ..., c2: float = ..., hess_inv0: Untyped | None = ...) -> Untyped:
    ...

def fmin_cg(f, x0, fprime: Untyped | None = ..., args=..., gtol: float = ..., norm=..., epsilon=..., maxiter: Untyped | None = ..., full_output: int = ..., disp: int = ..., retall: int = ..., callback: Untyped | None = ..., c1: float = ..., c2: float = ...) -> Untyped:
    ...

def fmin_ncg(f, x0, fprime, fhess_p: Untyped | None = ..., fhess: Untyped | None = ..., args=..., avextol: float = ..., epsilon=..., maxiter: Untyped | None = ..., full_output: int = ..., disp: int = ..., retall: int = ..., callback: Untyped | None = ..., c1: float = ..., c2: float = ...) -> Untyped:
    ...

def fminbound(func, x1, x2, args=..., xtol: float = ..., maxfun: int = ..., full_output: int = ..., disp: int = ...) -> Untyped:
    ...

class Brent:
    func: Untyped
    args: Untyped
    tol: Untyped
    maxiter: Untyped
    xmin: Untyped
    fval: Untyped
    iter: int
    funcalls: int
    disp: Untyped
    def __init__(self, func, args=..., tol: float = ..., maxiter: int = ..., full_output: int = ..., disp: int = ...) -> None:
        ...
    
    brack: Untyped
    def set_bracket(self, brack: Untyped | None = ...):
        ...
    
    def get_bracket_info(self) -> Untyped:
        ...
    
    def optimize(self):
        ...
    
    def get_result(self, full_output: bool = ...) -> Untyped:
        ...
    


def brent(func, args=..., brack: Untyped | None = ..., tol: float = ..., full_output: int = ..., maxiter: int = ...) -> Untyped:
    ...

def golden(func, args=..., brack: Untyped | None = ..., tol=..., full_output: int = ..., maxiter: int = ...) -> Untyped:
    ...

def bracket(func, xa: float = ..., xb: float = ..., args=..., grow_limit: float = ..., maxiter: int = ...) -> Untyped:
    ...

class BracketError(RuntimeError):
    ...


def fmin_powell(func, x0, args=..., xtol: float = ..., ftol: float = ..., maxiter: Untyped | None = ..., maxfun: Untyped | None = ..., full_output: int = ..., disp: int = ..., retall: int = ..., callback: Untyped | None = ..., direc: Untyped | None = ...) -> Untyped:
    ...

def brute(func, ranges, args=..., Ns: int = ..., full_output: int = ..., finish=..., disp: bool = ..., workers: int = ...) -> Untyped:
    ...

class _Brute_Wrapper:
    f: Untyped
    args: Untyped
    def __init__(self, f, args) -> None:
        ...
    
    def __call__(self, x) -> Untyped:
        ...
    


def show_options(solver: Untyped | None = ..., method: Untyped | None = ..., disp: bool = ...) -> Untyped:
    ...

