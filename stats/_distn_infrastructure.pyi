"""
This type stub file was generated by pyright.
"""

import numpy as np
import numpy.typing as npt
import optype.numpy as onpt
import scipy._typing as spt
from collections.abc import Callable, Iterable, Sequence
from typing import Any, Final, Generic, Literal, TypeAlias, overload, type_check_only
from typing_extensions import LiteralString, Self, TypeVar, Unpack, override
from numpy._typing import _ArrayLikeInt_co
from scipy.integrate._typing import QuadOpts as _QuadOpts

__all__ = ["_ShapeInfo", "argsreduce", "get_distribution_names", "rv_continuous", "rv_continuous_frozen", "rv_discrete", "rv_discrete_frozen", "rv_frozen", "rv_generic", "rv_sample"]
_RVG_co = TypeVar("_RVG_co", bound=rv_generic, covariant=True, default=rv_generic)
_RVC_co = TypeVar("_RVC_co", bound=rv_continuous, covariant=True, default=rv_continuous)
_RVD_co = TypeVar("_RVD_co", bound=rv_discrete, covariant=True, default=rv_discrete)
_XT_co = TypeVar("_XT_co", bound=np.number[Any], covariant=True, default=np.number[Any])
_PT_co = TypeVar("_PT_co", bound=np.floating[Any], covariant=True, default=np.float32 | np.float64)
_ShapeT = TypeVar("_ShapeT", bound=tuple[int, ...], default=tuple[int, ...])
_T = TypeVar("_T")
_Tuple2: TypeAlias = tuple[_T, _T]
_Tuple3: TypeAlias = tuple[_T, _T, _T]
_Tuple4: TypeAlias = tuple[_T, _T, _T, _T]
_Scalar_i: TypeAlias = np.integer[Any]
_Scalar_f: TypeAlias = np.float64 | np.float32 | np.float16
_Scalar_f8: TypeAlias = float | np.float64
_Scalar_f8_co: TypeAlias = float | _Scalar_f | _Scalar_i
_Arr_b1: TypeAlias = onpt.Array[_ShapeT, np.bool_]
_ArrLike_b1: TypeAlias = bool | np.bool_ | _Arr_b1
_ArrLike_i8: TypeAlias = int | np.int64 | onpt.Array[tuple[int, ...], np.int64]
_Arr_f8: TypeAlias = onpt.Array[_ShapeT, np.float64]
_Arr_f8_co: TypeAlias = onpt.Array[_ShapeT, _Scalar_f | _Scalar_i]
_ArrLike_f8: TypeAlias = _Scalar_f8 | _Arr_f8_co
_ArrLike_f8_co: TypeAlias = float | onpt.CanArray[tuple[int, ...], np.dtype[_Scalar_f | _Scalar_i]] | Sequence[_ArrLike_f8_co]
_ArgT = TypeVar("_ArgT", bound=_ArrLike_f8_co, default=_ArrLike_f8_co)
_RVArgs: TypeAlias = (tuple[()] | tuple[_ArgT] | tuple[_ArgT, _ArgT] | tuple[_ArgT, _ArgT, _ArgT] | tuple[_ArgT, _ArgT, _ArgT, _ArgT] | tuple[_ArgT, _ArgT, _ArgT, _ArgT, _ArgT] | tuple[_ArgT, _ArgT, _ArgT, _ArgT, _ArgT, _ArgT])
_RVKwds: TypeAlias = dict[str, _ArrLike_f8_co]
_StatsMoment: TypeAlias = Literal["m", "v", "s", "k", "mv", "ms", "mk", "vs", "vk", "sk", "mvs", "mvk", "msk", "vsk", "mvsk"]
_FitMethod: TypeAlias = Literal["MLE", "MM"]
docheaders: Final[dict[str, str]] = ...
docdict: Final[dict[str, str]] = ...
docdict_discrete: Final[dict[str, str]] = ...
parse_arg_template: Final[str] = ...
def argsreduce(cond: _Arr_b1, *args: _ArrLike_f8_co) -> list[_Arr_f8_co]:
    ...

class rv_frozen(Generic[_RVG_co]):
    args: Final[_RVArgs]
    kwds: Final[_RVKwds]
    dist: _RVG_co
    @property
    def random_state(self, /) -> spt.RNG:
        ...
    
    @random_state.setter
    def random_state(self, seed: spt.Seed, /) -> None:
        ...
    
    def __init__(self, /, dist: _RVG_co, *args: _ArrLike_f8_co, **kwds: _ArrLike_f8_co) -> None:
        ...
    
    def cdf(self, /, x: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    def logcdf(self, /, x: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    def ppf(self, /, q: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    def isf(self, /, q: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    def rvs(self, /, size: spt.AnyShape | None = ..., random_state: spt.Seed | None = ...) -> _ArrLike_f8:
        ...
    
    def sf(self, /, x: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    def logsf(self, /, x: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    @overload
    def stats(self, /, moments: Literal["m", "v", "s", "k"]) -> tuple[np.float64] | tuple[_Arr_f8]:
        ...
    
    @overload
    def stats(self, /, moments: Literal["mv", "ms", "mk", "vs", "vk", "sk"] = ...) -> _Tuple2[_Scalar_f8] | _Tuple2[_Arr_f8]:
        ...
    
    @overload
    def stats(self, /, moments: Literal["mvs", "mvk", "msk", "vsk"]) -> _Tuple3[np.float64] | _Tuple3[_Arr_f8]:
        ...
    
    @overload
    def stats(self, /, moments: Literal["mvsk"]) -> _Tuple4[np.float64] | _Tuple4[_Arr_f8]:
        ...
    
    def median(self, /) -> _ArrLike_f8:
        ...
    
    def mean(self, /) -> _ArrLike_f8:
        ...
    
    def var(self, /) -> _ArrLike_f8:
        ...
    
    def std(self, /) -> _ArrLike_f8:
        ...
    
    def moment(self, /, order: int | None = ...) -> _Scalar_f8:
        ...
    
    def entropy(self, /) -> _ArrLike_f8:
        ...
    
    def interval(self, /, confidence: _Scalar_f8_co | None = ...) -> _Tuple2[_Scalar_f8] | _Tuple2[_Arr_f8]:
        ...
    
    def support(self, /) -> _Tuple2[_Scalar_f8] | _Tuple2[_Arr_f8]:
        ...
    
    def expect(self, /, func: Callable[[float], float] | None = ..., lb: _Scalar_f8_co | None = ..., ub: _Scalar_f8_co | None = ..., conditional: bool = ..., **kwds: Unpack[_QuadOpts]) -> _Scalar_f8:
        ...
    


class rv_continuous_frozen(rv_frozen[_RVC_co], Generic[_RVC_co]):
    def pdf(self, /, x: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    def logpdf(self, /, x: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    


class rv_discrete_frozen(rv_frozen[_RVD_co], Generic[_RVD_co]):
    def pmf(self, /, k: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    def logpmf(self, /, k: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    


_XT = TypeVar("_XT", float | np.float64, _Arr_f8)
class rv_generic:
    def __init__(self, /, seed: spt.Seed | None = ...) -> None:
        ...
    
    @property
    def random_state(self, /) -> spt.RNG:
        ...
    
    @random_state.setter
    def random_state(self, seed: spt.Seed, /) -> None:
        ...
    
    def freeze(self, /, *args: _ArrLike_f8_co, **kwds: _ArrLike_f8_co) -> rv_frozen[Self]:
        ...
    
    def __call__(self, /, *args: Any, **kwds: Any) -> rv_frozen[Self]:
        ...
    
    @overload
    def rvs(self, /, *args: _Scalar_f8_co, random_state: spt.Seed, discrete: Literal[True, 1], **kwds: _ArrLike_f8_co) -> _ArrLike_i8:
        ...
    
    @overload
    def rvs(self, /, *args: _Scalar_f8_co, random_state: spt.Seed, discrete: Literal[False, 0, None] = ..., **kwds: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    @overload
    def stats(self, /, *args: _Scalar_f8_co, moment: _StatsMoment = ..., **kwds: _Scalar_f8_co) -> tuple[_Scalar_f8, ...]:
        ...
    
    @overload
    def stats(self, /, *args: _ArrLike_f8_co, moment: _StatsMoment = ..., **kwds: _ArrLike_f8_co) -> tuple[_Scalar_f8, ...] | tuple[_Arr_f8, ...]:
        ...
    
    @overload
    def entropy(self, /) -> _Scalar_f8:
        ...
    
    @overload
    def entropy(self, /, *args: _Scalar_f8_co, **kwds: _Scalar_f8_co) -> _Scalar_f8:
        ...
    
    @overload
    def entropy(self, /, *args: _ArrLike_f8_co, **kwds: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    @overload
    def moment(self, /, order: spt.AnyInt, *args: _Scalar_f8_co, **kwds: _Scalar_f8_co) -> _Scalar_f8:
        ...
    
    @overload
    def moment(self, /, order: spt.AnyInt, *args: _ArrLike_f8_co, **kwds: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    @overload
    def median(self, /, *args: _Scalar_f8_co, **kwds: _Scalar_f8_co) -> _Scalar_f8:
        ...
    
    @overload
    def median(self, /, *args: _ArrLike_f8_co, **kwds: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    @overload
    def mean(self, /, *args: _Scalar_f8_co, **kwds: _Scalar_f8_co) -> _Scalar_f8:
        ...
    
    @overload
    def mean(self, /, *args: _ArrLike_f8_co, **kwds: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    @overload
    def var(self, /, *args: _Scalar_f8_co, **kwds: _Scalar_f8_co) -> _Scalar_f8:
        ...
    
    @overload
    def var(self, /, *args: _ArrLike_f8_co, **kwds: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    @overload
    def std(self, /, *args: _Scalar_f8_co, **kwds: _Scalar_f8_co) -> _Scalar_f8:
        ...
    
    @overload
    def std(self, /, *args: _ArrLike_f8_co, **kwds: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    @overload
    def interval(self, /, confidence: _Scalar_f8_co, *args: _Scalar_f8_co, **kwds: _Scalar_f8_co) -> _Tuple2[_Scalar_f8]:
        ...
    
    @overload
    def interval(self, /, confidence: _ArrLike_f8, *args: _ArrLike_f8, **kwds: _ArrLike_f8) -> _Tuple2[_ArrLike_f8]:
        ...
    
    @overload
    def support(self, /, *args: _Scalar_f8_co, **kwds: _Scalar_f8_co) -> _Tuple2[_Scalar_f8]:
        ...
    
    @overload
    def support(self, /, *args: _ArrLike_f8_co, **kwds: _ArrLike_f8_co) -> _Tuple2[_ArrLike_f8]:
        ...
    
    def nnlf(self, /, theta: Sequence[_Scalar_f8_co], x: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    


class _ShapeInfo:
    name: Final[LiteralString]
    integrality: Final[bool]
    domain: Final[Sequence[float]]
    def __init__(self, /, name: LiteralString, integrality: bool = ..., domain: Sequence[float] = ..., inclusive: Sequence[bool] = ...) -> None:
        ...
    


@type_check_only
class _rv_mixin:
    name: Final[LiteralString]
    a: Final[float]
    b: Final[float]
    badvalue: Final[float]
    shapes: Final[LiteralString]
    def generic_moment(self, /, n: _ArrayLikeInt_co, *args: _Scalar_f8_co) -> _Arr_f8:
        ...
    


class rv_continuous(_rv_mixin, rv_generic):
    moment_type: Final[Literal[0, 1]]
    xtol: Final[float]
    def __init__(self, /, momtype: Literal[0, 1] = ..., a: float | None = ..., b: float | None = ..., xtol: float = ..., badvalue: float | None = ..., name: LiteralString | None = ..., longname: LiteralString | None = ..., shapes: LiteralString | None = ..., seed: spt.Seed | None = ...) -> None:
        ...
    
    @override
    def __call__(self, /, *args: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ..., **kwds: _ArrLike_f8_co) -> rv_continuous_frozen[Self]:
        ...
    
    @override
    def freeze(self, /, *args: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ..., **kwds: _ArrLike_f8_co) -> rv_continuous_frozen[Self]:
        ...
    
    @overload
    def pdf(self, /, x: _Scalar_f8_co, *args: _Scalar_f8_co, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ..., **kwds: _Scalar_f8_co) -> _Scalar_f8:
        ...
    
    @overload
    def pdf(self, /, x: _ArrLike_f8_co, *args: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ..., **kwds: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    @overload
    def logpdf(self, /, x: _Scalar_f8_co, *args: _Scalar_f8_co, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ..., **kwds: _Scalar_f8_co) -> _Scalar_f8:
        ...
    
    @overload
    def logpdf(self, /, x: _ArrLike_f8_co, *args: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ..., **kwds: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    @overload
    def cdf(self, /, x: _Scalar_f8_co, *args: _Scalar_f8_co, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ..., **kwds: _Scalar_f8_co) -> _Scalar_f8:
        ...
    
    @overload
    def cdf(self, /, x: _ArrLike_f8_co, *args: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ..., **kwds: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    @overload
    def logcdf(self, /, x: _Scalar_f8_co, *args: _Scalar_f8_co, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ..., **kwds: _Scalar_f8_co) -> _Scalar_f8:
        ...
    
    @overload
    def logcdf(self, /, x: _ArrLike_f8_co, *args: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ..., **kwds: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    @overload
    def sf(self, /, x: _Scalar_f8_co, *args: _Scalar_f8_co, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ..., **kwds: _Scalar_f8_co) -> _Scalar_f8:
        ...
    
    @overload
    def sf(self, /, x: _ArrLike_f8_co, *args: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ..., **kwds: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    @overload
    def logsf(self, /, x: _Scalar_f8_co, *args: _Scalar_f8_co, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ..., **kwds: _Scalar_f8_co) -> _Scalar_f8:
        ...
    
    @overload
    def logsf(self, /, x: _ArrLike_f8_co, *args: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ..., **kwds: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    @overload
    def ppf(self, /, q: _Scalar_f8_co, *args: _Scalar_f8_co, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ..., **kwds: _Scalar_f8_co) -> _Scalar_f8:
        ...
    
    @overload
    def ppf(self, /, q: _ArrLike_f8_co, *args: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ..., **kwds: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    @overload
    def isf(self, /, q: _Scalar_f8_co, *args: _Scalar_f8_co, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ..., **kwds: _Scalar_f8_co) -> _Scalar_f8:
        ...
    
    @overload
    def isf(self, /, q: _ArrLike_f8_co, *args: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ..., **kwds: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    def fit(self, /, data: _ArrLike_f8_co, *args: _Scalar_f8_co, optimizer: Callable[[_Arr_f8, tuple[_Scalar_f8, ...], tuple[_Scalar_f8, ...], bool], tuple[_Scalar_f8, ...]], method: _FitMethod = ..., **kwds: _Scalar_f8_co) -> tuple[_Scalar_f8, ...]:
        ...
    
    def fit_loc_scale(self, /, data: _ArrLike_f8_co, *args: _Scalar_f8_co) -> _Tuple2[_Scalar_f8]:
        ...
    
    def expect(self, /, func: Callable[[float], _Scalar_f8] | None = ..., args: tuple[_Scalar_f8_co, ...] = ..., loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ..., lb: _Scalar_f8_co | None = ..., ub: _Scalar_f8_co | None = ..., conditional: spt.AnyBool = ..., **kwds: Unpack[_QuadOpts]) -> _Scalar_f8:
        ...
    
    @override
    def rvs(self, /, *args: _Scalar_f8_co, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ..., size: spt.AnyShape = ..., random_state: spt.Seed | None = ..., **kwds: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    


class rv_discrete(_rv_mixin, rv_generic):
    inc: Final[int]
    moment_tol: Final[float]
    def __new__(cls, a: _Scalar_f8_co = ..., b: _Scalar_f8_co = ..., name: LiteralString | None = ..., badvalue: _Scalar_f8 | None = ..., moment_tol: _Scalar_f8 = ..., values: _Tuple2[_ArrLike_f8_co] | None = ..., inc: int | np.int_ = ..., longname: LiteralString | None = ..., shapes: LiteralString | None = ..., seed: spt.Seed | None = ...) -> Self:
        ...
    
    def __init__(self, /, a: _Scalar_f8_co = ..., b: _Scalar_f8_co = ..., name: LiteralString | None = ..., badvalue: _Scalar_f8 | None = ..., moment_tol: _Scalar_f8 = ..., values: None = ..., inc: int | np.int_ = ..., longname: LiteralString | None = ..., shapes: LiteralString | None = ..., seed: spt.Seed | None = ...) -> None:
        ...
    
    @override
    def __call__(self, /, *args: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., **kwds: _ArrLike_f8_co) -> rv_discrete_frozen[Self]:
        ...
    
    @override
    def freeze(self, /, *args: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., **kwds: _ArrLike_f8_co) -> rv_discrete_frozen[Self]:
        ...
    
    @override
    def rvs(self, /, *args: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., size: spt.AnyShape = ..., random_state: spt.Seed | None = ..., **kwds: _ArrLike_f8_co) -> _ArrLike_i8:
        ...
    
    @overload
    def pmf(self, /, k: _Scalar_f8_co, *args: _Scalar_f8_co, loc: _Scalar_f8_co = ..., **kwds: _Scalar_f8_co) -> _Scalar_f8:
        ...
    
    @overload
    def pmf(self, /, k: _ArrLike_f8_co, *args: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., **kwds: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    @overload
    def logpmf(self, /, k: _Scalar_f8_co, *args: _Scalar_f8_co, loc: _Scalar_f8_co = ..., **kwds: _Scalar_f8_co) -> _Scalar_f8:
        ...
    
    @overload
    def logpmf(self, /, k: _ArrLike_f8_co, *args: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., **kwds: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    @overload
    def cdf(self, /, k: _Scalar_f8_co, *args: _Scalar_f8_co, loc: _Scalar_f8_co = ..., **kwds: _Scalar_f8_co) -> _Scalar_f8:
        ...
    
    @overload
    def cdf(self, /, k: _ArrLike_f8_co, *args: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., **kwds: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    @overload
    def logcdf(self, /, k: _Scalar_f8_co, *args: _Scalar_f8_co, loc: _Scalar_f8_co = ..., **kwds: _Scalar_f8_co) -> _Scalar_f8:
        ...
    
    @overload
    def logcdf(self, /, k: _ArrLike_f8_co, *args: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., **kwds: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    @overload
    def sf(self, /, k: _Scalar_f8_co, *args: _Scalar_f8_co, loc: _Scalar_f8_co = ..., **kwds: _Scalar_f8_co) -> _Scalar_f8:
        ...
    
    @overload
    def sf(self, /, k: _ArrLike_f8_co, *args: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., **kwds: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    @overload
    def logsf(self, /, k: _Scalar_f8_co, *args: _Scalar_f8_co, loc: _Scalar_f8_co = ..., **kwds: _Scalar_f8_co) -> _Scalar_f8:
        ...
    
    @overload
    def logsf(self, /, k: _ArrLike_f8_co, *args: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., **kwds: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    @overload
    def ppf(self, /, q: _Scalar_f8_co, *args: _Scalar_f8_co, loc: _Scalar_f8_co = ..., **kwds: _Scalar_f8_co) -> _Scalar_f8:
        ...
    
    @overload
    def ppf(self, /, q: _ArrLike_f8_co, *args: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., **kwds: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    @overload
    def isf(self, /, q: _Scalar_f8_co, *args: _Scalar_f8_co, loc: _Scalar_f8_co = ..., **kwds: _Scalar_f8_co) -> _Scalar_f8:
        ...
    
    @overload
    def isf(self, /, q: _ArrLike_f8_co, *args: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., **kwds: _ArrLike_f8_co) -> _ArrLike_f8:
        ...
    
    def expect(self, /, func: Callable[[npt.NDArray[np.int_]], _Arr_f8_co] | None = ..., args: tuple[_Scalar_f8_co, ...] = ..., loc: _Scalar_f8_co = ..., lb: spt.AnyInt | None = ..., ub: spt.AnyInt | None = ..., conditional: spt.AnyBool = ..., maxcount: spt.AnyInt = ..., tolerance: _Scalar_f8_co = ..., chunksize: spt.AnyInt = ...) -> _Scalar_f8:
        ...
    


class rv_sample(rv_discrete, Generic[_XT_co, _PT_co]):
    xk: onpt.Array[tuple[int], _XT_co]
    pk: onpt.Array[tuple[int], _PT_co]
    qvals: onpt.Array[tuple[int], _PT_co]
    def __init__(self, /, a: _Scalar_f8_co = ..., b: _Scalar_f8_co = ..., name: LiteralString | None = ..., badvalue: float | None = ..., moment_tol: float = ..., values: tuple[_ArrLike_f8_co, _ArrLike_f8_co] | None = ..., inc: int = ..., longname: LiteralString | None = ..., shapes: LiteralString | None = ..., seed: spt.Seed | None = ...) -> None:
        ...
    
    vecentropy: Final = ...
    @override
    def generic_moment(self, /, n: _ArrayLikeInt_co | int | Sequence[int]) -> _Arr_f8:
        ...
    


def get_distribution_names(namespace_pairs: Iterable[tuple[str, type]], rv_base_class: type) -> _Tuple2[list[LiteralString]]:
    ...

@type_check_only
class _rv_continuous_0(rv_continuous):
    @override
    @overload
    def stats(self, /, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ..., moment: _StatsMoment = ...) -> tuple[_Scalar_f8, ...]:
        ...
    
    @overload
    def stats(self, /, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ..., moment: _StatsMoment = ...) -> tuple[_ArrLike_f8, ...]:
        ...
    
    @override
    @overload
    def entropy(self, /, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ...) -> _Scalar_f8:
        ...
    
    @overload
    def entropy(self, /, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ...) -> _ArrLike_f8:
        ...
    
    @override
    @overload
    def moment(self, /, order: spt.AnyInt, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ...) -> _Scalar_f8:
        ...
    
    @overload
    def moment(self, /, order: spt.AnyInt, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ...) -> _ArrLike_f8:
        ...
    
    @override
    @overload
    def median(self, /, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ...) -> _Scalar_f8:
        ...
    
    @overload
    def median(self, /, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ...) -> _ArrLike_f8:
        ...
    
    @override
    @overload
    def mean(self, /, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ...) -> _Scalar_f8:
        ...
    
    @overload
    def mean(self, /, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ...) -> _ArrLike_f8:
        ...
    
    @override
    @overload
    def var(self, /, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ...) -> _Scalar_f8:
        ...
    
    @overload
    def var(self, /, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ...) -> _ArrLike_f8:
        ...
    
    @override
    @overload
    def std(self, /, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ...) -> _Scalar_f8:
        ...
    
    @overload
    def std(self, /, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ...) -> _ArrLike_f8:
        ...
    
    @override
    @overload
    def interval(self, /, confidence: _Scalar_f8_co, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ...) -> _Tuple2[_Scalar_f8]:
        ...
    
    @overload
    def interval(self, /, confidence: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ...) -> _Tuple2[_Scalar_f8] | _Tuple2[_Arr_f8]:
        ...
    
    @override
    @overload
    def support(self, /, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ...) -> _Tuple2[_Scalar_f8]:
        ...
    
    @overload
    def support(self, /, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ...) -> _Tuple2[_Scalar_f8] | _Tuple2[_Arr_f8]:
        ...
    
    @override
    def __call__(self, /, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ...) -> rv_continuous_frozen[Self]:
        ...
    
    @override
    def freeze(self, /, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ...) -> rv_continuous_frozen[Self]:
        ...
    
    @override
    @overload
    def pdf(self, /, x: _Scalar_f8_co, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ...) -> _Scalar_f8:
        ...
    
    @overload
    def pdf(self, /, x: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ...) -> _ArrLike_f8:
        ...
    
    @override
    @overload
    def logpdf(self, /, x: _Scalar_f8_co, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ...) -> _Scalar_f8:
        ...
    
    @overload
    def logpdf(self, /, x: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ...) -> _ArrLike_f8:
        ...
    
    @override
    @overload
    def cdf(self, /, x: _Scalar_f8_co, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ...) -> _Scalar_f8:
        ...
    
    @overload
    def cdf(self, /, x: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ...) -> _ArrLike_f8:
        ...
    
    @override
    @overload
    def logcdf(self, /, x: _Scalar_f8_co, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ...) -> _Scalar_f8:
        ...
    
    @overload
    def logcdf(self, /, x: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ...) -> _ArrLike_f8:
        ...
    
    @override
    @overload
    def sf(self, /, x: _Scalar_f8_co, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ...) -> _Scalar_f8:
        ...
    
    @overload
    def sf(self, /, x: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ...) -> _ArrLike_f8:
        ...
    
    @override
    @overload
    def logsf(self, /, x: _Scalar_f8_co, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ...) -> _Scalar_f8:
        ...
    
    @overload
    def logsf(self, /, x: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ...) -> _ArrLike_f8:
        ...
    
    @override
    @overload
    def ppf(self, /, q: _Scalar_f8_co, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ...) -> _Scalar_f8:
        ...
    
    @overload
    def ppf(self, /, q: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ...) -> _ArrLike_f8:
        ...
    
    @override
    @overload
    def isf(self, /, q: _Scalar_f8_co, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ...) -> _Scalar_f8:
        ...
    
    @overload
    def isf(self, /, q: _ArrLike_f8_co, loc: _ArrLike_f8_co = ..., scale: _ArrLike_f8_co = ...) -> _ArrLike_f8:
        ...
    
    @override
    def rvs(self, /, loc: _Scalar_f8_co = ..., scale: _Scalar_f8_co = ..., size: spt.AnyShape = ..., random_state: spt.Seed | None = ...) -> _ArrLike_f8:
        ...
    


