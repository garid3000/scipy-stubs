"""
This type stub file was generated by pyright.
"""

from typing import NamedTuple
from scipy._typing import Untyped

def argstoarray(*args) -> Untyped:
    ...

def find_repeats(arr) -> Untyped:
    ...

def count_tied_groups(x, use_missing: bool = ...) -> Untyped:
    ...

def rankdata(data, axis: Untyped | None = ..., use_missing: bool = ...) -> Untyped:
    ...

class ModeResult(NamedTuple):
    mode: Untyped
    count: Untyped
    ...


def mode(a, axis: int = ...) -> Untyped:
    ...

def msign(x) -> Untyped:
    ...

def pearsonr(x, y) -> Untyped:
    ...

def spearmanr(x, y: Untyped | None = ..., use_ties: bool = ..., axis: Untyped | None = ..., nan_policy: str = ..., alternative: str = ...) -> Untyped:
    ...

def kendalltau(x, y, use_ties: bool = ..., use_missing: bool = ..., method: str = ..., alternative: str = ...) -> Untyped:
    ...

def kendalltau_seasonal(x) -> Untyped:
    ...

class PointbiserialrResult(NamedTuple):
    correlation: Untyped
    pvalue: Untyped
    ...


def pointbiserialr(x, y) -> Untyped:
    ...

def linregress(x, y: Untyped | None = ...) -> Untyped:
    ...

def theilslopes(y, x: Untyped | None = ..., alpha: float = ..., method: str = ...) -> Untyped:
    ...

def siegelslopes(y, x: Untyped | None = ..., method: str = ...) -> Untyped:
    ...

SenSeasonalSlopesResult: Untyped
def sen_seasonal_slopes(x) -> Untyped:
    ...

class Ttest_1sampResult(NamedTuple):
    statistic: Untyped
    pvalue: Untyped
    ...


def ttest_1samp(a, popmean, axis: int = ..., alternative: str = ...) -> Untyped:
    ...

ttest_onesamp = ...
class Ttest_indResult(NamedTuple):
    statistic: Untyped
    pvalue: Untyped
    ...


def ttest_ind(a, b, axis: int = ..., equal_var: bool = ..., alternative: str = ...) -> Untyped:
    ...

class Ttest_relResult(NamedTuple):
    statistic: Untyped
    pvalue: Untyped
    ...


def ttest_rel(a, b, axis: int = ..., alternative: str = ...) -> Untyped:
    ...

class MannwhitneyuResult(NamedTuple):
    statistic: Untyped
    pvalue: Untyped
    ...


def mannwhitneyu(x, y, use_continuity: bool = ...) -> Untyped:
    ...

class KruskalResult(NamedTuple):
    statistic: Untyped
    pvalue: Untyped
    ...


def kruskal(*args) -> Untyped:
    ...

kruskalwallis = ...
def ks_1samp(x, cdf, args=..., alternative: str = ..., method: str = ...) -> Untyped:
    ...

def ks_2samp(data1, data2, alternative: str = ..., method: str = ...) -> Untyped:
    ...

ks_twosamp = ...
def kstest(data1, data2, args=..., alternative: str = ..., method: str = ...) -> Untyped:
    ...

def trima(a, limits: Untyped | None = ..., inclusive=...) -> Untyped:
    ...

def trimr(a, limits: Untyped | None = ..., inclusive=..., axis: Untyped | None = ...) -> Untyped:
    ...

trimdoc: str
def trim(a, limits: Untyped | None = ..., inclusive=..., relative: bool = ..., axis: Untyped | None = ...) -> Untyped:
    ...

def trimboth(data, proportiontocut: float = ..., inclusive=..., axis: Untyped | None = ...) -> Untyped:
    ...

def trimtail(data, proportiontocut: float = ..., tail: str = ..., inclusive=..., axis: Untyped | None = ...) -> Untyped:
    ...

trim1 = ...
def trimmed_mean(a, limits=..., inclusive=..., relative: bool = ..., axis: Untyped | None = ...) -> Untyped:
    ...

def trimmed_var(a, limits=..., inclusive=..., relative: bool = ..., axis: Untyped | None = ..., ddof: int = ...) -> Untyped:
    ...

def trimmed_std(a, limits=..., inclusive=..., relative: bool = ..., axis: Untyped | None = ..., ddof: int = ...) -> Untyped:
    ...

def trimmed_stde(a, limits=..., inclusive=..., axis: Untyped | None = ...) -> Untyped:
    ...

def tmean(a, limits: Untyped | None = ..., inclusive=..., axis: Untyped | None = ...) -> Untyped:
    ...

def tvar(a, limits: Untyped | None = ..., inclusive=..., axis: int = ..., ddof: int = ...) -> Untyped:
    ...

def tmin(a, lowerlimit: Untyped | None = ..., axis: int = ..., inclusive: bool = ...) -> Untyped:
    ...

def tmax(a, upperlimit: Untyped | None = ..., axis: int = ..., inclusive: bool = ...) -> Untyped:
    ...

def tsem(a, limits: Untyped | None = ..., inclusive=..., axis: int = ..., ddof: int = ...) -> Untyped:
    ...

def winsorize(a, limits: Untyped | None = ..., inclusive=..., inplace: bool = ..., axis: Untyped | None = ..., nan_policy: str = ...) -> Untyped:
    ...

def moment(a, moment: int = ..., axis: int = ...) -> Untyped:
    ...

def variation(a, axis: int = ..., ddof: int = ...) -> Untyped:
    ...

def skew(a, axis: int = ..., bias: bool = ...) -> Untyped:
    ...

def kurtosis(a, axis: int = ..., fisher: bool = ..., bias: bool = ...) -> Untyped:
    ...

class DescribeResult(NamedTuple):
    nobs: Untyped
    minmax: Untyped
    mean: Untyped
    variance: Untyped
    skewness: Untyped
    kurtosis: Untyped
    ...


def describe(a, axis: int = ..., ddof: int = ..., bias: bool = ...) -> Untyped:
    ...

def stde_median(data, axis: Untyped | None = ...) -> Untyped:
    ...

class SkewtestResult(NamedTuple):
    statistic: Untyped
    pvalue: Untyped
    ...


def skewtest(a, axis: int = ..., alternative: str = ...) -> Untyped:
    ...

class KurtosistestResult(NamedTuple):
    statistic: Untyped
    pvalue: Untyped
    ...


def kurtosistest(a, axis: int = ..., alternative: str = ...) -> Untyped:
    ...

class NormaltestResult(NamedTuple):
    statistic: Untyped
    pvalue: Untyped
    ...


def normaltest(a, axis: int = ...) -> Untyped:
    ...

def mquantiles(a, prob=..., alphap: float = ..., betap: float = ..., axis: Untyped | None = ..., limit=...) -> Untyped:
    ...

def scoreatpercentile(data, per, limit=..., alphap: float = ..., betap: float = ...) -> Untyped:
    ...

def plotting_positions(data, alpha: float = ..., beta: float = ...) -> Untyped:
    ...

meppf = ...
def obrientransform(*args) -> Untyped:
    ...

def sem(a, axis: int = ..., ddof: int = ...) -> Untyped:
    ...

class F_onewayResult(NamedTuple):
    statistic: Untyped
    pvalue: Untyped
    ...


def f_oneway(*args) -> Untyped:
    ...

class FriedmanchisquareResult(NamedTuple):
    statistic: Untyped
    pvalue: Untyped
    ...


def friedmanchisquare(*args) -> Untyped:
    ...

class BrunnerMunzelResult(NamedTuple):
    statistic: Untyped
    pvalue: Untyped
    ...


def brunnermunzel(x, y, alternative: str = ..., distribution: str = ...) -> Untyped:
    ...

