"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import NamedTuple
from scipy._typing import Untyped

__all__ = ["alexandergovern", "brunnermunzel", "chisquare", "combine_pvalues", "cumfreq", "describe", "energy_distance", "expectile", "f_oneway", "find_repeats", "fisher_exact", "friedmanchisquare", "gmean", "gstd", "gzscore", "hmean", "iqr", "jarque_bera", "kendalltau", "kruskal", "ks_1samp", "ks_2samp", "kstest", "kurtosis", "kurtosistest", "linregress", "median_abs_deviation", "mode", "moment", "normaltest", "obrientransform", "pearsonr", "percentileofscore", "pmean", "pointbiserialr", "power_divergence", "quantile_test", "rankdata", "ranksums", "relfreq", "scoreatpercentile", "sem", "siegelslopes", "sigmaclip", "skew", "skewtest", "spearmanr", "theilslopes", "tiecorrect", "tmax", "tmean", "tmin", "trim1", "trim_mean", "trimboth", "tsem", "tstd", "ttest_1samp", "ttest_ind", "ttest_ind_from_stats", "ttest_rel", "tvar", "wasserstein_distance", "wasserstein_distance_nd", "weightedtau", "zmap", "zscore"]
SignificanceResult: Untyped
def gmean(a, axis: int = ..., dtype: Untyped | None = ..., weights: Untyped | None = ...) -> Untyped:
    ...

def hmean(a, axis: int = ..., dtype: Untyped | None = ..., *, weights: Untyped | None = ...) -> Untyped:
    ...

def pmean(a, p, *, axis: int = ..., dtype: Untyped | None = ..., weights: Untyped | None = ...) -> Untyped:
    ...

class ModeResult(NamedTuple):
    mode: Untyped
    count: Untyped
    ...


def mode(a, axis: int = ..., nan_policy: str = ..., keepdims: bool = ...) -> Untyped:
    ...

def tmean(a, limits: Untyped | None = ..., inclusive=..., axis: Untyped | None = ...) -> Untyped:
    ...

def tvar(a, limits: Untyped | None = ..., inclusive=..., axis: int = ..., ddof: int = ...) -> Untyped:
    ...

def tmin(a, lowerlimit: Untyped | None = ..., axis: int = ..., inclusive: bool = ..., nan_policy: str = ...) -> Untyped:
    ...

def tmax(a, upperlimit: Untyped | None = ..., axis: int = ..., inclusive: bool = ..., nan_policy: str = ...) -> Untyped:
    ...

def tstd(a, limits: Untyped | None = ..., inclusive=..., axis: int = ..., ddof: int = ...) -> Untyped:
    ...

def tsem(a, limits: Untyped | None = ..., inclusive=..., axis: int = ..., ddof: int = ...) -> Untyped:
    ...

def moment(a, order: int = ..., axis: int = ..., nan_policy: str = ..., *, center: Untyped | None = ...) -> Untyped:
    ...

def skew(a, axis: int = ..., bias: bool = ..., nan_policy: str = ...) -> Untyped:
    ...

def kurtosis(a, axis: int = ..., fisher: bool = ..., bias: bool = ..., nan_policy: str = ...) -> Untyped:
    ...

class DescribeResult(NamedTuple):
    nobs: Untyped
    minmax: Untyped
    mean: Untyped
    variance: Untyped
    skewness: Untyped
    kurtosis: Untyped
    ...


def describe(a, axis: int = ..., ddof: int = ..., bias: bool = ..., nan_policy: str = ...) -> Untyped:
    ...

class SkewtestResult(NamedTuple):
    statistic: Untyped
    pvalue: Untyped
    ...


def skewtest(a, axis: int = ..., nan_policy: str = ..., alternative: str = ...) -> Untyped:
    ...

class KurtosistestResult(NamedTuple):
    statistic: Untyped
    pvalue: Untyped
    ...


def kurtosistest(a, axis: int = ..., nan_policy: str = ..., alternative: str = ...) -> Untyped:
    ...

class NormaltestResult(NamedTuple):
    statistic: Untyped
    pvalue: Untyped
    ...


def normaltest(a, axis: int = ..., nan_policy: str = ...) -> Untyped:
    ...

def jarque_bera(x, *, axis: Untyped | None = ...) -> Untyped:
    ...

def scoreatpercentile(a, per, limit=..., interpolation_method: str = ..., axis: Untyped | None = ...) -> Untyped:
    ...

def percentileofscore(a, score, kind: str = ..., nan_policy: str = ...) -> Untyped:
    ...

class HistogramResult(NamedTuple):
    count: Untyped
    lowerlimit: Untyped
    binsize: Untyped
    extrapoints: Untyped
    ...


class CumfreqResult(NamedTuple):
    cumcount: Untyped
    lowerlimit: Untyped
    binsize: Untyped
    extrapoints: Untyped
    ...


def cumfreq(a, numbins: int = ..., defaultreallimits: Untyped | None = ..., weights: Untyped | None = ...) -> Untyped:
    ...

class RelfreqResult(NamedTuple):
    frequency: Untyped
    lowerlimit: Untyped
    binsize: Untyped
    extrapoints: Untyped
    ...


def relfreq(a, numbins: int = ..., defaultreallimits: Untyped | None = ..., weights: Untyped | None = ...) -> Untyped:
    ...

def obrientransform(*samples) -> Untyped:
    ...

def sem(a, axis: int = ..., ddof: int = ..., nan_policy: str = ...) -> Untyped:
    ...

def zscore(a, axis: int = ..., ddof: int = ..., nan_policy: str = ...) -> Untyped:
    ...

def gzscore(a, *, axis: int = ..., ddof: int = ..., nan_policy: str = ...) -> Untyped:
    ...

def zmap(scores, compare, axis: int = ..., ddof: int = ..., nan_policy: str = ...) -> Untyped:
    ...

def gstd(a, axis: int = ..., ddof: int = ...) -> Untyped:
    ...

def iqr(x, axis: Untyped | None = ..., rng=..., scale: float = ..., nan_policy: str = ..., interpolation: str = ..., keepdims: bool = ...) -> Untyped:
    ...

def median_abs_deviation(x, axis: int = ..., center=..., scale: float = ..., nan_policy: str = ...) -> Untyped:
    ...

class SigmaclipResult(NamedTuple):
    clipped: Untyped
    lower: Untyped
    upper: Untyped
    ...


def sigmaclip(a, low: float = ..., high: float = ...) -> Untyped:
    ...

def trimboth(a, proportiontocut, axis: int = ...) -> Untyped:
    ...

def trim1(a, proportiontocut, tail: str = ..., axis: int = ...) -> Untyped:
    ...

def trim_mean(a, proportiontocut, axis: int = ...) -> Untyped:
    ...

class F_onewayResult(NamedTuple):
    statistic: Untyped
    pvalue: Untyped
    ...


def f_oneway(*samples, axis: int = ...) -> Untyped:
    ...

@dataclass
class AlexanderGovernResult:
    statistic: float
    pvalue: float
    ...


def alexandergovern(*samples, nan_policy: str = ..., axis: int = ...) -> Untyped:
    ...

class ConfidenceInterval(NamedTuple):
    low: Untyped
    high: Untyped
    ...


class PearsonRResultBase(NamedTuple):
    statistic: Untyped
    pvalue: Untyped
    ...


class PearsonRResult(PearsonRResultBase):
    correlation: Untyped
    def __init__(self, statistic, pvalue, alternative, n, x, y, axis) -> None:
        ...
    
    def confidence_interval(self, confidence_level: float = ..., method: Untyped | None = ...) -> Untyped:
        ...
    


def pearsonr(x, y, *, alternative: str = ..., method: Untyped | None = ..., axis: int = ...) -> Untyped:
    ...

def fisher_exact(table, alternative: str = ...) -> Untyped:
    ...

def spearmanr(a, b: Untyped | None = ..., axis: int = ..., nan_policy: str = ..., alternative: str = ...) -> Untyped:
    ...

def pointbiserialr(x, y) -> Untyped:
    ...

def kendalltau(x, y, *, nan_policy: str = ..., method: str = ..., variant: str = ..., alternative: str = ...) -> Untyped:
    ...

def weightedtau(x, y, rank: bool = ..., weigher: Untyped | None = ..., additive: bool = ...) -> Untyped:
    ...

class TtestResultBase(NamedTuple):
    statistic: Untyped
    pvalue: Untyped
    @property
    def df(self) -> Untyped:
        ...
    


class TtestResult(TtestResultBase):
    def __init__(self, statistic, pvalue, df, alternative, standard_error, estimate, statistic_np: Untyped | None = ..., xp: Untyped | None = ...) -> None:
        ...
    
    def confidence_interval(self, confidence_level: float = ...) -> Untyped:
        ...
    


def pack_TtestResult(statistic, pvalue, df, alternative, standard_error, estimate) -> Untyped:
    ...

def unpack_TtestResult(res) -> Untyped:
    ...

def ttest_1samp(a, popmean, axis: int = ..., nan_policy: str = ..., alternative: str = ...) -> Untyped:
    ...

class Ttest_indResult(NamedTuple):
    statistic: Untyped
    pvalue: Untyped
    ...


def ttest_ind_from_stats(mean1, std1, nobs1, mean2, std2, nobs2, equal_var: bool = ..., alternative: str = ...) -> Untyped:
    ...

def ttest_ind(a, b, axis: int = ..., equal_var: bool = ..., nan_policy: str = ..., permutations: Untyped | None = ..., random_state: Untyped | None = ..., alternative: str = ..., trim: int = ...) -> Untyped:
    ...

def ttest_rel(a, b, axis: int = ..., nan_policy: str = ..., alternative: str = ...) -> Untyped:
    ...

class Power_divergenceResult(NamedTuple):
    statistic: Untyped
    pvalue: Untyped
    ...


def power_divergence(f_obs, f_exp: Untyped | None = ..., ddof: int = ..., axis: int = ..., lambda_: Untyped | None = ...) -> Untyped:
    ...

def chisquare(f_obs, f_exp: Untyped | None = ..., ddof: int = ..., axis: int = ...) -> Untyped:
    ...

KstestResult: Untyped
def ks_1samp(x, cdf, args=..., alternative: str = ..., method: str = ...) -> Untyped:
    ...

Ks_2sampResult = KstestResult
def ks_2samp(data1, data2, alternative: str = ..., method: str = ...) -> Untyped:
    ...

def kstest(rvs, cdf, args=..., N: int = ..., alternative: str = ..., method: str = ...) -> Untyped:
    ...

def tiecorrect(rankvals) -> Untyped:
    ...

class RanksumsResult(NamedTuple):
    statistic: Untyped
    pvalue: Untyped
    ...


def ranksums(x, y, alternative: str = ...) -> Untyped:
    ...

class KruskalResult(NamedTuple):
    statistic: Untyped
    pvalue: Untyped
    ...


def kruskal(*samples, nan_policy: str = ...) -> Untyped:
    ...

class FriedmanchisquareResult(NamedTuple):
    statistic: Untyped
    pvalue: Untyped
    ...


def friedmanchisquare(*samples) -> Untyped:
    ...

class BrunnerMunzelResult(NamedTuple):
    statistic: Untyped
    pvalue: Untyped
    ...


def brunnermunzel(x, y, alternative: str = ..., distribution: str = ..., nan_policy: str = ...) -> Untyped:
    ...

def combine_pvalues(pvalues, method: str = ..., weights: Untyped | None = ..., *, axis: int = ...) -> Untyped:
    ...

@dataclass
class QuantileTestResult:
    statistic: float
    statistic_type: int
    pvalue: float
    def confidence_interval(self, confidence_level: float = ...) -> Untyped:
        ...
    


def quantile_test_iv(x, q, p, alternative) -> Untyped:
    ...

def quantile_test(x, *, q: int = ..., p: float = ..., alternative: str = ...) -> Untyped:
    ...

def wasserstein_distance_nd(u_values, v_values, u_weights: Untyped | None = ..., v_weights: Untyped | None = ...) -> Untyped:
    ...

def wasserstein_distance(u_values, v_values, u_weights: Untyped | None = ..., v_weights: Untyped | None = ...) -> Untyped:
    ...

def energy_distance(u_values, v_values, u_weights: Untyped | None = ..., v_weights: Untyped | None = ...) -> Untyped:
    ...

class RepeatedResults(NamedTuple):
    values: Untyped
    counts: Untyped
    ...


def find_repeats(arr) -> Untyped:
    ...

def rankdata(a, method: str = ..., *, axis: Untyped | None = ..., nan_policy: str = ...) -> Untyped:
    ...

def expectile(a, alpha: float = ..., *, weights: Untyped | None = ...) -> Untyped:
    ...

LinregressResult: Untyped
def linregress(x, y: Untyped | None = ..., alternative: str = ...) -> Untyped:
    ...

class _SimpleNormal:
    def cdf(self, x) -> Untyped:
        ...
    
    def sf(self, x) -> Untyped:
        ...
    
    def isf(self, x) -> Untyped:
        ...
    


class _SimpleChi2:
    df: Untyped
    def __init__(self, df) -> None:
        ...
    
    def cdf(self, x) -> Untyped:
        ...
    
    def sf(self, x) -> Untyped:
        ...
    


class _SimpleBeta:
    a: Untyped
    b: Untyped
    loc: Untyped
    scale: Untyped
    def __init__(self, a, b, *, loc: Untyped | None = ..., scale: Untyped | None = ...) -> None:
        ...
    
    def cdf(self, x) -> Untyped:
        ...
    
    def sf(self, x) -> Untyped:
        ...
    


class _SimpleStudentT:
    df: Untyped
    def __init__(self, df) -> None:
        ...
    
    def cdf(self, t) -> Untyped:
        ...
    
    def sf(self, t) -> Untyped:
        ...
    


