"""
This type stub file was generated by pyright.
"""

import numpy as np
import numpy.typing as npt
import optype.numpy as onpt
import scipy._typing as spt
from collections.abc import Callable, Sequence
from typing import Any, Literal, TypeAlias, overload
from typing_extensions import TypeVar

_PointsWeights: TypeAlias = tuple[npt.NDArray[np.float64], npt.NDArray[np.float64]]
_PointsWeightsMu: TypeAlias = tuple[npt.NDArray[np.float64], npt.NDArray[np.float64], np.float64]
__all__ = ["c_roots", "cg_roots", "chebyc", "chebys", "chebyt", "chebyu", "gegenbauer", "genlaguerre", "h_roots", "he_roots", "hermite", "hermitenorm", "j_roots", "jacobi", "js_roots", "l_roots", "la_roots", "laguerre", "legendre", "p_roots", "ps_roots", "roots_chebyc", "roots_chebys", "roots_chebyt", "roots_chebyu", "roots_gegenbauer", "roots_genlaguerre", "roots_hermite", "roots_hermitenorm", "roots_jacobi", "roots_laguerre", "roots_legendre", "roots_sh_chebyt", "roots_sh_chebyu", "roots_sh_jacobi", "roots_sh_legendre", "s_roots", "sh_chebyt", "sh_chebyu", "sh_jacobi", "sh_legendre", "t_roots", "ts_roots", "u_roots", "us_roots"]
_ShapeT = TypeVar("_ShapeT", bound=tuple[int, ...])
class orthopoly1d(np.poly1d):
    limits: tuple[float, float]
    weights: npt.NDArray[np.float64]
    weight_func: Callable[[float], float]
    normcoef: float
    def __init__(self, /, roots: npt.ArrayLike, weights: npt.ArrayLike | None = ..., hn: float = ..., kn: float = ..., wfunc: Callable[[float], float] | None = ..., limits: tuple[float, float] | None = ..., monic: bool = ..., eval_func: np.ufunc | None = ...) -> None:
        ...
    
    @overload
    def __call__(self, v: np.poly1d) -> np.poly1d:
        ...
    
    @overload
    def __call__(self, v: spt.AnyReal) -> np.floating[Any]:
        ...
    
    @overload
    def __call__(self, v: spt.AnyComplex) -> np.inexact[Any]:
        ...
    
    @overload
    def __call__(self, v: onpt.CanArray[_ShapeT, np.dtype[np.floating[Any] | np.integer[Any] | np.bool_]] | Sequence[npt.ArrayLike]) -> onpt.Array[_ShapeT, np.floating[Any]]:
        ...
    


@overload
def roots_jacobi(n: spt.AnyInt, alpha: spt.AnyReal, beta: spt.AnyReal, mu: Literal[False] = ...) -> _PointsWeights:
    ...

@overload
def roots_jacobi(n: spt.AnyInt, alpha: spt.AnyReal, beta: spt.AnyReal, mu: Literal[True]) -> _PointsWeightsMu:
    ...

@overload
def roots_sh_jacobi(n: spt.AnyInt, p1: spt.AnyReal, q1: spt.AnyReal, mu: Literal[False] = ...) -> _PointsWeights:
    ...

@overload
def roots_sh_jacobi(n: spt.AnyInt, p1: spt.AnyReal, q1: spt.AnyReal, mu: Literal[True]) -> _PointsWeightsMu:
    ...

@overload
def roots_genlaguerre(n: spt.AnyInt, alpha: spt.AnyReal, mu: Literal[False] = ...) -> _PointsWeights:
    ...

@overload
def roots_genlaguerre(n: spt.AnyInt, alpha: spt.AnyReal, mu: Literal[True]) -> _PointsWeightsMu:
    ...

@overload
def roots_laguerre(n: spt.AnyInt, mu: Literal[False] = ...) -> _PointsWeights:
    ...

@overload
def roots_laguerre(n: spt.AnyInt, mu: Literal[True]) -> _PointsWeightsMu:
    ...

@overload
def roots_hermite(n: spt.AnyInt, mu: Literal[False] = ...) -> _PointsWeights:
    ...

@overload
def roots_hermite(n: spt.AnyInt, mu: Literal[True]) -> _PointsWeightsMu:
    ...

@overload
def roots_hermitenorm(n: spt.AnyInt, mu: Literal[False] = ...) -> _PointsWeights:
    ...

@overload
def roots_hermitenorm(n: spt.AnyInt, mu: Literal[True]) -> _PointsWeightsMu:
    ...

@overload
def roots_gegenbauer(n: spt.AnyInt, alpha: spt.AnyReal, mu: Literal[False] = ...) -> _PointsWeights:
    ...

@overload
def roots_gegenbauer(n: spt.AnyInt, alpha: spt.AnyReal, mu: Literal[True]) -> _PointsWeightsMu:
    ...

@overload
def roots_chebyt(n: spt.AnyInt, mu: Literal[False] = ...) -> _PointsWeights:
    ...

@overload
def roots_chebyt(n: spt.AnyInt, mu: Literal[True]) -> _PointsWeightsMu:
    ...

@overload
def roots_chebyu(n: spt.AnyInt, mu: Literal[False] = ...) -> _PointsWeights:
    ...

@overload
def roots_chebyu(n: spt.AnyInt, mu: Literal[True]) -> _PointsWeightsMu:
    ...

@overload
def roots_chebyc(n: spt.AnyInt, mu: Literal[False] = ...) -> _PointsWeights:
    ...

@overload
def roots_chebyc(n: spt.AnyInt, mu: Literal[True]) -> _PointsWeightsMu:
    ...

@overload
def roots_chebys(n: spt.AnyInt, mu: Literal[False] = ...) -> _PointsWeights:
    ...

@overload
def roots_chebys(n: spt.AnyInt, mu: Literal[True]) -> _PointsWeightsMu:
    ...

@overload
def roots_sh_chebyt(n: spt.AnyInt, mu: Literal[False] = ...) -> _PointsWeights:
    ...

@overload
def roots_sh_chebyt(n: spt.AnyInt, mu: Literal[True]) -> _PointsWeightsMu:
    ...

@overload
def roots_sh_chebyu(n: spt.AnyInt, mu: Literal[False] = ...) -> _PointsWeights:
    ...

@overload
def roots_sh_chebyu(n: spt.AnyInt, mu: Literal[True]) -> _PointsWeightsMu:
    ...

@overload
def roots_legendre(n: spt.AnyInt, mu: Literal[False] = ...) -> _PointsWeights:
    ...

@overload
def roots_legendre(n: spt.AnyInt, mu: Literal[True]) -> _PointsWeightsMu:
    ...

@overload
def roots_sh_legendre(n: spt.AnyInt, mu: Literal[False] = ...) -> _PointsWeights:
    ...

@overload
def roots_sh_legendre(n: spt.AnyInt, mu: Literal[True]) -> _PointsWeightsMu:
    ...

def legendre(n: spt.AnyInt, monic: bool = ...) -> orthopoly1d:
    ...

def chebyt(n: spt.AnyInt, monic: bool = ...) -> orthopoly1d:
    ...

def chebyu(n: spt.AnyInt, monic: bool = ...) -> orthopoly1d:
    ...

def chebyc(n: spt.AnyInt, monic: bool = ...) -> orthopoly1d:
    ...

def chebys(n: spt.AnyInt, monic: bool = ...) -> orthopoly1d:
    ...

def jacobi(n: spt.AnyInt, alpha: spt.AnyReal, beta: spt.AnyReal, monic: bool = ...) -> orthopoly1d:
    ...

def laguerre(n: spt.AnyInt, monic: bool = ...) -> orthopoly1d:
    ...

def genlaguerre(n: spt.AnyInt, alpha: spt.AnyReal, monic: bool = ...) -> orthopoly1d:
    ...

def hermite(n: spt.AnyInt, monic: bool = ...) -> orthopoly1d:
    ...

def hermitenorm(n: spt.AnyInt, monic: bool = ...) -> orthopoly1d:
    ...

def gegenbauer(n: spt.AnyInt, alpha: spt.AnyReal, monic: bool = ...) -> orthopoly1d:
    ...

def sh_legendre(n: spt.AnyInt, monic: bool = ...) -> orthopoly1d:
    ...

def sh_chebyt(n: spt.AnyInt, monic: bool = ...) -> orthopoly1d:
    ...

def sh_chebyu(n: spt.AnyInt, monic: bool = ...) -> orthopoly1d:
    ...

def sh_jacobi(n: spt.AnyInt, p: spt.AnyReal, q: spt.AnyReal, monic: bool = ...) -> orthopoly1d:
    ...

p_roots = ...
t_roots = ...
u_roots = ...
c_roots = ...
s_roots = ...
j_roots = ...
l_roots = ...
la_roots = ...
h_roots = ...
he_roots = ...
cg_roots = ...
ps_roots = ...
ts_roots = ...
us_roots = ...
js_roots = ...
