"""
This type stub file was generated by pyright.
"""

import numpy as np
import numpy.typing as npt
from typing import Literal

__all__ = ["N_A", "Avogadro", "Boltzmann", "Btu", "Btu_IT", "Btu_th", "G", "Julian_year", "Planck", "R", "Rydberg", "Stefan_Boltzmann", "Wien", "acre", "alpha", "angstrom", "arcmin", "arcminute", "arcsec", "arcsecond", "astronomical_unit", "atm", "atmosphere", "atomic_mass", "atto", "au", "bar", "barrel", "bbl", "blob", "c", "calorie", "calorie_IT", "calorie_th", "carat", "centi", "convert_temperature", "day", "deci", "degree", "degree_Fahrenheit", "deka", "dyn", "dyne", "e", "eV", "electron_mass", "electron_volt", "elementary_charge", "epsilon_0", "erg", "exa", "exbi", "femto", "fermi", "fine_structure", "fluid_ounce", "fluid_ounce_US", "fluid_ounce_imp", "foot", "g", "gallon", "gallon_US", "gallon_imp", "gas_constant", "gibi", "giga", "golden", "golden_ratio", "grain", "gram", "gravitational_constant", "h", "hbar", "hectare", "hecto", "horsepower", "hour", "hp", "inch", "k", "kgf", "kibi", "kilo", "kilogram_force", "kmh", "knot", "lambda2nu", "lb", "lbf", "light_year", "liter", "litre", "long_ton", "m_e", "m_n", "m_p", "m_u", "mach", "mebi", "mega", "metric_ton", "micro", "micron", "mil", "mile", "milli", "minute", "mmHg", "mph", "mu_0", "nano", "nautical_mile", "neutron_mass", "nu2lambda", "ounce", "oz", "parsec", "pebi", "peta", "pi", "pico", "point", "pound", "pound_force", "proton_mass", "psi", "pt", "quecto", "quetta", "ronna", "ronto", "short_ton", "sigma", "slinch", "slug", "speed_of_light", "speed_of_sound", "stone", "survey_foot", "survey_mile", "tebi", "tera", "ton_TNT", "torr", "troy_ounce", "troy_pound", "u", "week", "yard", "year", "yobi", "yocto", "yotta", "zebi", "zepto", "zero_Celsius", "zetta"]
pi: float
golden: float
golden_ratio: float
quetta: float
ronna: float
yotta: float
zetta: float
exa: float
peta: float
tera: float
giga: float
mega: float
kilo: float
hecto: float
deka: float
deci: float
centi: float
milli: float
micro: float
nano: float
pico: float
femto: float
atto: float
zepto: float
yocto: float
ronto: float
quecto: float
kibi: Literal[1024]
mebi: Literal[1048576]
gibi: Literal[1073741824]
tebi: Literal[1099511627776]
pebi: Literal[1125899906842624]
exbi: Literal[1152921504606846976]
zebi: Literal[1180591620717411303424]
yobi: Literal[1208925819614629174706176]
c: float
speed_of_light: float
mu_0: float
epsilon_0: float
h: float
Planck: float
hbar: float
G: float
gravitational_constant: float
g: float
e: float
elementary_charge: float
R: float
gas_constant: float
alpha: float
fine_structure: float
N_A: float
Avogadro: float
k: float
Boltzmann: float
sigma: float
Stefan_Boltzmann: float
Wien: float
Rydberg: float
gram: float
metric_ton: float
grain: float
lb: float
pound: float
blob: float
slinch: float
slug: float
oz: float
ounce: float
stone: float
long_ton: float
short_ton: float
troy_ounce: float
troy_pound: float
carat: float
m_e: float
electron_mass: float
m_p: float
proton_mass: float
m_n: float
neutron_mass: float
m_u: float
u: float
atomic_mass: float
degree: float
arcmin: float
arcminute: float
arcsec: float
arcsecond: float
minute: float
hour: float
day: float
week: float
year: float
Julian_year: float
inch: float
foot: float
yard: float
mile: float
mil: float
pt: float
point: float
survey_foot: float
survey_mile: float
nautical_mile: float
fermi: float
angstrom: float
micron: float
au: float
astronomical_unit: float
light_year: float
parsec: float
atm: float
atmosphere: float
bar: float
torr: float
mmHg: float
psi: float
hectare: float
acre: float
litre: float
liter: float
gallon: float
gallon_US: float
fluid_ounce: float
fluid_ounce_US: float
bbl: float
barrel: float
gallon_imp: float
fluid_ounce_imp: float
kmh: float
mph: float
mach: float
speed_of_sound: float
knot: float
zero_Celsius: float
degree_Fahrenheit: float
eV = ...
electron_volt = ...
calorie: float
calorie_th: float
calorie_IT: float
erg: float
Btu_th: float
Btu: float
Btu_IT: float
ton_TNT: float
hp: float
horsepower: float
dyn: float
dyne: float
lbf: float
pound_force: float
kgf = ...
kilogram_force = ...
def convert_temperature(val: npt.ArrayLike, old_scale: str, new_scale: str) -> np.float64 | npt.NDArray[np.float64]:
    ...

def lambda2nu(lambda_: npt.ArrayLike) -> np.float64 | npt.NDArray[np.float64]:
    ...

def nu2lambda(nu: npt.ArrayLike) -> np.float64 | npt.NDArray[np.float64]:
    ...

